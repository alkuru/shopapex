#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç AutoSputnik API –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ C15300
"""

import requests
import json

def test_autosputnik_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º AutoSputnik API –Ω–∞–ø—Ä—è–º—É—é"""
    print("=== –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç AutoSputnik API ===")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API
    API_URL = 'https://newapi.auto-sputnik.ru'
    LOGIN = '89219520754'
    PASSWORD = '89219520754'
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
        token_url = f'{API_URL}/users/login'
        token_data = {'login': LOGIN, 'password': PASSWORD}
        token_resp = requests.post(token_url, json=token_data, timeout=10)
        token_resp.raise_for_status()
        token = token_resp.json().get('token')
        if not token:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return
        print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        print("\n2. –ó–∞–ø—Ä–æ—Å –∫ API...")
        search_url = f'{API_URL}/products/getproducts'
        headers = {'Authorization': f'Bearer {token}', 'Content-Type': 'application/json'}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        test_cases = [
            {
                "name": "C15300 + MANN-FILTER + analogi=true",
                "payload": {
                    "articul": "c15300",
                    "brand": "MANN-FILTER",
                    "analogi": True,
                    "tranzit": True
                }
            },
            {
                "name": "C15300 + MANN-FILTER + analogi=false",
                "payload": {
                    "articul": "c15300",
                    "brand": "MANN-FILTER",
                    "analogi": False,
                    "tranzit": True
                }
            },
            {
                "name": "C15300 + MANN-FILTER + tranzit=false",
                "payload": {
                    "articul": "c15300",
                    "brand": "MANN-FILTER",
                    "analogi": True,
                    "tranzit": False
                }
            }
        ]
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n--- –¢–µ—Å—Ç {i}: {test_case['name']} ---")
            
            response = requests.post(
                search_url,
                json=test_case['payload'],
                headers=headers,
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                items = data.get('data', [])
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"üìä –¢–æ–≤–∞—Ä–æ–≤: {len(items)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                if 'hasNextPage' in data:
                    print(f"üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è:")
                    print(f"   - hasNextPage: {data.get('hasNextPage')}")
                    print(f"   - totalCount: {data.get('totalCount')}")
                    print(f"   - pageSize: {data.get('pageSize')}")
                    print(f"   - currentPage: {data.get('currentPage')}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
                brands = set()
                for item in items:
                    brand_name = item.get("brand", {}).get("name", "")
                    if brand_name:
                        brands.add(brand_name)
                
                print(f"üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(brands)}")
                print(f"üîç –ë—Ä–µ–Ω–¥—ã: {sorted(brands)}")
                
                # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
                print("üìã –ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤:")
                for j, item in enumerate(items[:5]):
                    print(f"   {j+1}. {item.get('articul')} | {item.get('brand', {}).get('name')} | {item.get('price_name')}")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_autosputnik_api() 