#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ OEM –Ω–æ–º–µ—Ä–æ–≤
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex.settings')
django.setup()

from catalog.models import Product, OemNumber, ProductOem, Brand, ProductCategory
from django.db.models import Q

def test_oem_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π OEM –Ω–æ–º–µ—Ä–æ–≤"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê OEM –ù–û–ú–ï–†–û–í")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ OEM –Ω–æ–º–µ—Ä–∞
    oem_number = OemNumber.objects.filter(number="BMW 13717521023").first()
    if oem_number:
        print(f"‚úÖ OEM –Ω–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω: {oem_number.number}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {oem_number.description}")
    else:
        print("‚ùå OEM –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º OEM –Ω–æ–º–µ—Ä–æ–º
    products_with_oem = Product.objects.filter(
        oem_numbers__oem_number=oem_number,
        is_active=True
    ).select_related('brand', 'category')
    
    print(f"\nüì¶ –¢–æ–≤–∞—Ä—ã —Å OEM –Ω–æ–º–µ—Ä–æ–º {oem_number.number}:")
    for product in products_with_oem:
        print(f"   ‚Ä¢ {product.name} - {product.brand.name} - {product.price}‚ÇΩ")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ OEM –Ω–æ–º–µ—Ä—É
    print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ OEM –Ω–æ–º–µ—Ä—É 'BMW 13717521023':")
    search_results = Product.objects.filter(
        oem_numbers__oem_number__number__icontains="BMW 13717521023",
        is_active=True
    ).select_related('brand', 'category').distinct()
    
    for product in search_results:
        print(f"   ‚Ä¢ {product.name} - {product.brand.name}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –æ–±—â–µ–º –ø–æ–∏—Å–∫–µ
    print(f"\nüîç –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ 'BMW':")
    general_search = Product.objects.filter(
        Q(article__icontains="BMW") | 
        Q(name__icontains="BMW") | 
        Q(description__icontains="BMW") |
        Q(oem_numbers__oem_number__number__icontains="BMW"),
        is_active=True
    ).select_related('brand', 'category').distinct()
    
    for product in general_search:
        print(f"   ‚Ä¢ {product.name} - {product.brand.name}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    original_product = Product.objects.filter(article="C 30 195").first()
    if original_product:
        print(f"\nüîó –ê–Ω–∞–ª–æ–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{original_product.name}':")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ OEM –Ω–æ–º–µ—Ä–∞ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        oem_numbers = original_product.oem_numbers.all()
        for product_oem in oem_numbers:
            print(f"   OEM: {product_oem.oem_number.number}")
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–Ω–∞–ª–æ–≥–∏ –ø–æ —ç—Ç–æ–º—É OEM
            analogs = Product.objects.filter(
                oem_numbers__oem_number=product_oem.oem_number,
                is_active=True
            ).exclude(id=original_product.id).select_related('brand', 'category')
            
            for analog in analogs:
                print(f"     ‚Üí {analog.name} - {analog.brand.name} - {analog.price}‚ÇΩ")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_oem_functionality()
