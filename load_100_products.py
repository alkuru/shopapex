#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ 100 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import django
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, Brand, ProductCategory
    
    print("üì¶ –ó–ê–ì–†–£–ó–ö–ê 100 –¢–û–í–ê–†–û–í –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_data = [
        '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
        '–î–≤–∏–≥–∞—Ç–µ–ª—å',
        '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è',
        '–ü–æ–¥–≤–µ—Å–∫–∞',
        '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
        '–ö—É–∑–æ–≤',
        '–§–∏–ª—å—Ç—Ä—ã',
        '–ú–∞—Å–ª–∞ –∏ –∂–∏–¥–∫–æ—Å—Ç–∏'
    ]
    
    categories = []
    for cat_name in categories_data:
        category, created = ProductCategory.objects.get_or_create(
            name=cat_name,
            defaults={'is_active': True}
        )
        categories.append(category)
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}")
    
    # –°–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥—ã
    brands_data = [
        'Bosch', 'Mann Filter', 'Mahle', 'Febi', 'Lemf√∂rder',
        'TRW', 'Sachs', 'Brembo', 'ATE', 'Continental',
        'NGK', 'Denso', 'Hella', 'Valeo', 'SKF'
    ]
    
    brands = []
    for brand_name in brands_data:
        brand, created = Brand.objects.get_or_create(
            name=brand_name,
            defaults={'is_active': True}
        )
        brands.append(brand)
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—Ä–µ–Ω–¥: {brand_name}")
    
    # –°–æ–∑–¥–∞–µ–º 100 —Ç–æ–≤–∞—Ä–æ–≤
    products_data = [
        {'prefix': 'BRP', 'type': '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏'},
        {'prefix': 'FL', 'type': '–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä'},
        {'prefix': 'AF', 'type': '–í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä'},
        {'prefix': 'SP', 'type': '–°–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è'},
        {'prefix': 'SH', 'type': '–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä'},
        {'prefix': 'CV', 'type': '–®–†–£–°'},
        {'prefix': 'BK', 'type': '–¢–æ—Ä–º–æ–∑–Ω–æ–π –¥–∏—Å–∫'},
        {'prefix': 'WP', 'type': '–í–æ–¥—è–Ω–æ–π –Ω–∞—Å–æ—Å'},
        {'prefix': 'TB', 'type': '–†–µ–º–µ–Ω—å –ì–†–ú'},
        {'prefix': 'CL', 'type': '–°—Ü–µ–ø–ª–µ–Ω–∏–µ'}
    ]
    
    created_count = 0
    
    for i in range(100):
        product_template = random.choice(products_data)
        article = f"{product_template['prefix']}{1000 + i}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if Product.objects.filter(article=article).exists():
            continue
            
        brand = random.choice(brands)
        category = random.choice(categories)
        price = random.randint(500, 15000)
        
        product = Product.objects.create(
            article=article,
            name=f"{product_template['type']} {brand.name} {article}",
            brand=brand,
            category=category,
            price=price,
            description=f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {product_template['type'].lower()} –æ—Ç {brand.name}",
            stock_quantity=random.randint(0, 50),
            is_active=True,
            is_featured=random.choice([True, False])
        )
        
        created_count += 1
        if created_count % 10 == 0:
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {created_count}")
    
    print(f"\nüéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {created_count}")
    print(f"‚úÖ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {Product.objects.count()}")
    print(f"‚úÖ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ProductCategory.objects.count()}")
    print(f"‚úÖ –í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤: {Brand.objects.count()}")
    
    # –ü–æ–∫–∞–∂–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    print(f"\nüìã –ü–†–ò–ú–ï–†–´ –°–û–ó–î–ê–ù–ù–´–• –¢–û–í–ê–†–û–í:")
    sample_products = Product.objects.filter(article__startswith='BRP').order_by('-id')[:5]
    for product in sample_products:
        print(f"   {product.article} - {product.name} ({product.price} —Ä—É–±.)")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
