#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –∏ –±—Ä–µ–Ω–¥–∞–º–∏
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, Brand, ProductCategory
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –ê–†–¢–ò–ö–£–õ–ê–ú–ò –ò –ë–†–ï–ù–î–ê–ú–ò")
    print("=" * 60)
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ç–∏–∫—É–ª-–±—Ä–µ–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π
    correct_brand_mapping = {
        # –§–∏–ª—å—Ç—Ä—ã
        'FL': ['Mann', 'Mahle', 'Bosch', 'Hella'],  # –ú–∞—Å–ª—è–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        'AF': ['Mann', 'Mahle', 'Bosch', 'Hella'],  # –í–æ–∑–¥—É—à–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        'FF': ['Mann', 'Mahle', 'Bosch'],           # –¢–æ–ø–ª–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        
        # –¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        'BK': ['Brembo', 'ATE', 'TRW', 'Bosch'],   # –¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏
        'BP': ['Brembo', 'ATE', 'TRW', 'Bosch'],   # –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏
        'BR': ['Brembo', 'ATE', 'TRW'],            # –¢–æ—Ä–º–æ–∑–Ω—ã–µ (–æ–±—â–∏–µ)
        
        # –î–≤–∏–≥–∞—Ç–µ–ª—å
        'SP': ['NGK', 'Bosch', 'Denso'],           # –°–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è
        'WP': ['Continental', 'Febi', 'SKF'],      # –í–æ–¥—è–Ω—ã–µ –Ω–∞—Å–æ—Å—ã
        'TB': ['Continental', 'Febi', 'SKF'],      # –†–µ–º–Ω–∏ –ì–†–ú
        
        # –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è
        'CL': ['Sachs', 'Valeo', 'LuK'],           # –°—Ü–µ–ø–ª–µ–Ω–∏–µ (LuK –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º Sachs)
        'CV': ['SKF', 'Febi', 'Lemf√∂rder'],        # –®–†–£–°
        
        # –ü–æ–¥–≤–µ—Å–∫–∞
        'SH': ['Sachs', 'Lemf√∂rder', 'TRW'],       # –ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã
        'ST': ['Sachs', 'Lemf√∂rder', 'TRW'],       # –°—Ç–æ–π–∫–∏
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã
    all_brands = {brand.name: brand for brand in Brand.objects.all()}
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã: {list(all_brands.keys())}")
    
    # –°—á–µ—Ç—á–∏–∫–∏
    updated_count = 0
    total_products = Product.objects.count()
    
    print(f"\nüîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {total_products} —Ç–æ–≤–∞—Ä–æ–≤...")
    
    for product in Product.objects.all():
        article = product.article
        current_brand = product.brand.name if product.brand else "–ù–ï–¢"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        article_prefix = article[:2]
        correct_brands = correct_brand_mapping.get(article_prefix, [])
        
        if not correct_brands:
            # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –±—Ä–µ–Ω–¥ —Å–µ–π—á–∞—Å
        if current_brand in correct_brands:
            # –ë—Ä–µ–Ω–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            continue
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±—Ä–µ–Ω–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
        new_brand_name = None
        for brand_name in correct_brands:
            if brand_name in all_brands:
                new_brand_name = brand_name
                break
        
        if new_brand_name:
            old_brand = current_brand
            product.brand = all_brands[new_brand_name]
            product.save()
            updated_count += 1
            print(f"‚úÖ {article:10} | {old_brand:15} ‚Üí {new_brand_name:15} | {product.name[:40]}")
        else:
            print(f"‚ö†Ô∏è  {article:10} | –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ {article_prefix}")
    
    print(f"\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {updated_count} –∏–∑ {total_products}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–†–ï–ù–î–ê–ú:")
    for brand in Brand.objects.all():
        count = Product.objects.filter(brand=brand).count()
        print(f"   {brand.name:15} | —Ç–æ–≤–∞—Ä–æ–≤: {count:3d}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –û–°–¢–ê–í–®–ò–•–°–Ø –ü–†–û–ë–õ–ï–ú:")
    remaining_issues = 0
    
    for product in Product.objects.all():
        article = product.article
        brand_name = product.brand.name if product.brand else "–ù–ï–¢"
        article_prefix = article[:2]
        correct_brands = correct_brand_mapping.get(article_prefix, [])
        
        if correct_brands and brand_name not in correct_brands:
            remaining_issues += 1
            if remaining_issues <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚ö†Ô∏è  {article} -> {brand_name} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ {correct_brands})")
    
    if remaining_issues == 0:
        print("   ‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        print(f"   ‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–ª–µ–º: {remaining_issues}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
