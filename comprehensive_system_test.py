#!/usr/bin/env python
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò SHOPAPEX
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ production –≤—ã–≥—Ä—É–∑–∫–æ–π
"""

import os
import sys
import django
import requests
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.urls import reverse
from django.conf import settings
from catalog.models import Supplier, APIMonitorLog
try:
    from catalog.models import Category, Brand, Product
except ImportError:
    Category = Brand = Product = None
try:
    from orders.models import Order
except ImportError:
    Order = None
try:
    from customers.models import Customer
except ImportError:
    Customer = None

def print_section(title, emoji="üîß"):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–µ–∫—Ü–∏–π"""
    print(f"\n{emoji} {title}")
    print("=" * 60)

def print_test(name, status, details=""):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status_emoji = "‚úÖ" if status else "‚ùå"
    print(f"   {status_emoji} {name}")
    if details:
        print(f"      {details}")

class ComprehensiveSystemTest:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.client = Client()
        self.test_results = {
            'database': [],
            'models': [],
            'api': [],
            'web': [],
            'admin': [],
            'suppliers': [],
            'search': [],
            'integration': []
        }
        self.total_tests = 0
        self.passed_tests = 0
    
    def run_test(self, category, name, test_func):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            self.total_tests += 1
            result = test_func()
            if result:
                self.passed_tests += 1
            self.test_results[category].append({
                'name': name,
                'status': result,
                'details': result if isinstance(result, str) else ""
            })
            return result
        except Exception as e:
            self.test_results[category].append({
                'name': name,
                'status': False,
                'details': f"–û—à–∏–±–∫–∞: {str(e)}"
            })
            return False
    
    def test_database_connectivity(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                return True
        except:
            return False
    
    def test_database_tables(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
            Supplier.objects.exists()
            APIMonitorLog.objects.exists()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if Category:
                Category.objects.exists()
            if Brand:
                Brand.objects.exists()
            if Product:
                Product.objects.exists()
            if Order:
                Order.objects.exists()
            if Customer:
                Customer.objects.exists()
                
            return True
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def test_models_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            test_objects = []
            
            if Category:
                category = Category.objects.create(
                    name="–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                    description="–¢–µ—Å—Ç"
                )
                test_objects.append(category)
            
            if Brand:
                brand = Brand.objects.create(
                    name="–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥",
                    description="–¢–µ—Å—Ç"
                )
                test_objects.append(brand)
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
            for obj in test_objects:
                obj.delete()
                
            return True
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}"
    
    def test_suppliers_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
        try:
            suppliers = Supplier.objects.all()
            if not suppliers.exists():
                return "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            
            active_suppliers = suppliers.filter(is_active=True)
            results = []
            
            for supplier in active_suppliers:
                has_api_url = bool(supplier.api_url)
                has_credentials = bool(supplier.api_login and supplier.api_password)
                mock_disabled = not supplier.use_mock_admin_api if hasattr(supplier, 'use_mock_admin_api') else True
                
                status = "‚úÖ" if (has_api_url and has_credentials and mock_disabled) else "‚ö†Ô∏è"
                results.append(f"{supplier.name}: {status}")
            
            return f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {active_suppliers.count()}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç API endpoints"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints
            endpoints = [
                '/api/categories/',
                '/api/brands/',
                '/api/products/',
                '/api/suppliers/',
            ]
            
            working_endpoints = 0
            for endpoint in endpoints:
                try:
                    response = self.client.get(endpoint)
                    if response.status_code in [200, 404]:  # 404 OK –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        working_endpoints += 1
                except:
                    pass
            
            return f"{working_endpoints}/{len(endpoints)} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def test_web_pages(self):
        """–¢–µ—Å—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            pages = [
                '/',
                '/catalog/',
                '/search/',
                '/admin/',
            ]
            
            working_pages = 0
            for page in pages:
                try:
                    response = self.client.get(page)
                    if response.status_code in [200, 302, 403]:  # 302 —Ä–µ–¥–∏—Ä–µ–∫—Ç, 403 –Ω–µ—Ç –ø—Ä–∞–≤ - –û–ö
                        working_pages += 1
                except:
                    pass
            
            return f"{working_pages}/{len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ—Å—Ç—É–ø–Ω—ã"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def test_admin_interface(self):
        """–¢–µ—Å—Ç –∞–¥–º–∏–Ω–∫–∏ Django"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∫–∏
            response = self.client.get('/admin/')
            admin_accessible = response.status_code in [200, 302]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ
            from django.contrib import admin
            registered_models = len(admin.site._registry)
            
            return f"–ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –º–æ–¥–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {registered_models}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def test_search_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            from catalog.forms import QuickSearchForm, AdvancedSearchForm
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º
            quick_form = QuickSearchForm({'query': 'test'})
            advanced_form = AdvancedSearchForm({
                'article': 'test',
                'brand': 'test',
                'name': 'test'
            })
            
            return "–§–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def test_supplier_api_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
        try:
            suppliers = Supplier.objects.filter(is_active=True)
            working_suppliers = 0
            
            for supplier in suppliers:
                try:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    success, result = supplier.test_connection()
                    if success:
                        working_suppliers += 1
                except:
                    pass
            
            return f"{working_suppliers}/{suppliers.count()} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –æ—Ç–≤–µ—á–∞—é—Ç"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def test_monitoring_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏ API —Å–æ–∑–¥–∞—é—Ç—Å—è
            recent_logs = APIMonitorLog.objects.order_by('-created_at')[:5]
            log_count = recent_logs.count()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å APIHealthCheck —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                from catalog.models import APIHealthCheck
                health_checks_exist = True
            except:
                health_checks_exist = False
            
            return f"–õ–æ–≥–æ–≤ API: {log_count}, Health checks: {'–î–∞' if health_checks_exist else '–ù–µ—Ç'}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def test_static_files(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            static_url = getattr(settings, 'STATIC_URL', None)
            static_root = getattr(settings, 'STATIC_ROOT', None)
            
            return f"STATIC_URL: {static_url}, STATIC_ROOT –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'–î–∞' if static_root else '–ù–µ—Ç'}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def test_django_settings(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django"""
        try:
            issues = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if settings.DEBUG:
                issues.append("DEBUG=True")
            
            if 'django-insecure' in settings.SECRET_KEY:
                issues.append("–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π SECRET_KEY")
            
            if not settings.ALLOWED_HOSTS or 'localhost' in settings.ALLOWED_HOSTS:
                issues.append("ALLOWED_HOSTS —Å–æ–¥–µ—Ä–∂–∏—Ç localhost")
            
            if issues:
                return f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(issues)}"
            else:
                return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò SHOPAPEX")
        print("=" * 80)
        print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print(f"üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production –≤—ã–≥—Ä—É–∑–∫–µ")
        print()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        print_section("–¢–ï–°–¢–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•", "üóÉÔ∏è")
        self.run_test('database', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', self.test_database_connectivity)
        self.run_test('database', '–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü', self.test_database_tables)
        
        # –ú–æ–¥–µ–ª–∏ Django
        print_section("–¢–ï–°–¢–´ –ú–û–î–ï–õ–ï–ô DJANGO", "üèóÔ∏è")
        self.run_test('models', '–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤', self.test_models_creation)
        self.run_test('models', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', self.test_suppliers_configuration)
        
        # API
        print_section("–¢–ï–°–¢–´ API", "üîå")
        self.run_test('api', 'API endpoints', self.test_api_endpoints)
        self.run_test('api', '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏', self.test_supplier_api_integration)
        
        # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        print_section("–¢–ï–°–¢–´ –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê", "üåê")
        self.run_test('web', '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü', self.test_web_pages)
        self.run_test('web', '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞', self.test_search_functionality)
        
        # –ê–¥–º–∏–Ω–∫–∞
        print_section("–¢–ï–°–¢–´ –ê–î–ú–ò–ù–ö–ò", "‚öôÔ∏è")
        self.run_test('admin', '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', self.test_admin_interface)
        
        # –°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print_section("–¢–ï–°–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê", "üìä")
        self.run_test('integration', '–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', self.test_monitoring_system)
        self.run_test('integration', '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã', self.test_static_files)
        self.run_test('integration', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django', self.test_django_settings)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_results()
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        print_section("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´", "üìã")
        
        for category, tests in self.test_results.items():
            if tests:
                category_names = {
                    'database': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
                    'models': '–ú–æ–¥–µ–ª–∏ Django', 
                    'api': 'API',
                    'web': '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                    'admin': '–ê–¥–º–∏–Ω–∫–∞',
                    'suppliers': '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏',
                    'search': '–ü–æ–∏—Å–∫',
                    'integration': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
                }
                
                print(f"\nüîç {category_names.get(category, category.upper())}:")
                for test in tests:
                    print_test(test['name'], test['status'], test['details'])
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (self.passed_tests / self.total_tests * 100) if self.total_tests > 0 else 0
        
        print_section("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê", "üìä")
        print(f"   üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.total_tests - self.passed_tests}")
        print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        print_section("–û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö PRODUCTION", "üéØ")
        
        if success_rate >= 90:
            print("   üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ production")
            readiness = "–ì–û–¢–û–í"
        elif success_rate >= 75:
            print("   ‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏")
            readiness = "–ì–û–¢–û–í –° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò"
        elif success_rate >= 50:
            print("   ‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            readiness = "–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"
        else:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ production")
            readiness = "–ù–ï –ì–û–¢–û–í"
        
        print(f"   üöÄ –°—Ç–∞—Ç—É—Å: {readiness}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print_section("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", "üí°")
        
        failed_tests = [test for tests in self.test_results.values() for test in tests if not test['status']]
        
        if failed_tests:
            print("   üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for test in failed_tests:
                print(f"      - {test['name']}: {test['details']}")
        else:
            print("   ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        print("\n   üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("      1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("      2. –ü–æ–ª—É—á–∏—Ç—å production credentials –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        print("      3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å production —Å–µ—Ä–≤–µ—Ä")
        print("      4. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        return readiness

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    tester = ComprehensiveSystemTest()
    return tester.run_all_tests()

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    run_comprehensive_test()
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
