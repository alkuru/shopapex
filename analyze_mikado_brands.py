#!/usr/bin/env python
import pandas as pd
import requests
import json

def get_autosputnik_brands():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –æ—Ç –ê–≤—Ç–æ–°–ø—É—Ç–Ω–∏–∫–∞"""
    try:
        # API –ê–≤—Ç–æ–°–ø—É—Ç–Ω–∏–∫–∞
        API_URL = 'https://newapi.auto-sputnik.ru'
        LOGIN = '89219520754'
        PASSWORD = '89219520754'
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token_url = f'{API_URL}/users/login'
        token_data = {'login': LOGIN, 'password': PASSWORD}
        token_response = requests.post(token_url, json=token_data, timeout=10)
        
        if token_response.status_code != 200:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ê–≤—Ç–æ–°–ø—É—Ç–Ω–∏–∫–∞")
            return set()
        
        token = token_response.json().get('token')
        if not token:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return set()
        
        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥—ã
        brands_url = f'{API_URL}/products/getbrands'
        headers = {'Authorization': f'Bearer {token}'}
        brands_response = requests.get(brands_url, headers=headers, timeout=30)
        
        if brands_response.status_code != 200:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤")
            return set()
        
        brands_data = brands_response.json()
        autosputnik_brands = set()
        
        if isinstance(brands_data, list):
            for brand_info in brands_data:
                if isinstance(brand_info, dict) and 'name' in brand_info:
                    autosputnik_brands.add(brand_info['name'])
                elif isinstance(brand_info, str):
                    autosputnik_brands.add(brand_info)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(autosputnik_brands)} –±—Ä–µ–Ω–¥–æ–≤ –æ—Ç –ê–≤—Ç–æ–°–ø—É—Ç–Ω–∏–∫–∞")
        return autosputnik_brands
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –ê–≤—Ç–æ–°–ø—É—Ç–Ω–∏–∫–∞: {e}")
        return set()

def analyze_mikado_brands():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã Mikado –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ê–≤—Ç–æ–°–ø—É—Ç–Ω–∏–∫–æ–º"""
    
    print("=== –ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–û–í MIKADO ===")
    
    # –ß–∏—Ç–∞–µ–º –ø—Ä–∞–π—Å Mikado
    file_path = "import/SPB-MSK_0033749_250725.xlsx"
    
    try:
        df = pd.read_excel(file_path)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∞–π—Å Mikado: {len(df)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –∏–∑ Mikado
        mikado_brands = set(df['–ë—Ä–µ–Ω–¥'].dropna().astype(str).str.strip())
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –≤ Mikado: {len(mikado_brands)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥—ã –ê–≤—Ç–æ–°–ø—É—Ç–Ω–∏–∫–∞
        autosputnik_brands = get_autosputnik_brands()
        
        if not autosputnik_brands:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–µ–Ω–¥—ã –ê–≤—Ç–æ–°–ø—É—Ç–Ω–∏–∫–∞")
            return
        
        # –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        def normalize_brand(brand):
            return str(brand).lower().strip().replace(' ', '').replace('-', '').replace('/', '').replace('_', '')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        mikado_normalized = {normalize_brand(b): b for b in mikado_brands}
        autosputnik_normalized = {normalize_brand(b): b for b in autosputnik_brands}
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        exact_matches = []
        partial_matches = []
        no_matches = []
        
        print("\n=== –ü–û–ò–°–ö –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô ===")
        
        for mikado_norm, mikado_original in mikado_normalized.items():
            found_match = False
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if mikado_norm in autosputnik_normalized:
                autosputnik_brand = autosputnik_normalized[mikado_norm]
                exact_matches.append({
                    'mikado': mikado_original,
                    'autosputnik': autosputnik_brand,
                    'type': 'exact'
                })
                found_match = True
            else:
                # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                for as_norm, as_original in autosputnik_normalized.items():
                    if (mikado_norm in as_norm or as_norm in mikado_norm) and len(mikado_norm) > 2:
                        partial_matches.append({
                            'mikado': mikado_original,
                            'autosputnik': as_original,
                            'type': 'partial'
                        })
                        found_match = True
                        break
            
            if not found_match:
                no_matches.append(mikado_original)
        
        print(f"‚úÖ –¢–æ—á–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(exact_matches)}")
        print(f"üî∂ –ß–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(partial_matches)}")
        print(f"‚ùå –ë–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(no_matches)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        result = {
            'exact_matches': exact_matches,
            'partial_matches': partial_matches,
            'no_matches': no_matches,
            'stats': {
                'total_mikado_brands': len(mikado_brands),
                'total_autosputnik_brands': len(autosputnik_brands),
                'exact_matches_count': len(exact_matches),
                'partial_matches_count': len(partial_matches),
                'no_matches_count': len(no_matches)
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_file = 'mikado_brand_analysis_results.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        print(f"\n=== –ü–†–ò–ú–ï–†–´ –¢–û–ß–ù–´–• –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô ===")
        for match in exact_matches[:10]:
            print(f"  '{match['mikado']}' -> '{match['autosputnik']}'")
        
        print(f"\n=== –ü–†–ò–ú–ï–†–´ –ß–ê–°–¢–ò–ß–ù–´–• –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô ===")
        for match in partial_matches[:10]:
            print(f"  '{match['mikado']}' -> '{match['autosputnik']}'")
        
        print(f"\n=== –ü–†–ò–ú–ï–†–´ –ë–ï–ó –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô ===")
        for brand in no_matches[:10]:
            print(f"  '{brand}'")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == '__main__':
    analyze_mikado_brands() 