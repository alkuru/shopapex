#!/usr/bin/env python
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–µ—Ç–æ–¥–∞ get_product_analogs
"""
import os
import sys
import django
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def detailed_debug():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–µ—Ç–æ–¥–∞ get_product_analogs"""
    
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ get_product_analogs...")
    print("=" * 60)
    
    try:
        supplier = Supplier.objects.filter(is_active=True, api_type='autoparts').first()
        
        if not supplier:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            return
        
        print(f"üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.name}")
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥—ã
        print("\nüîç –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤...")
        success, brands_data = supplier.get_abcp_brands('test123')
        print(f"‚úÖ –£—Å–ø–µ—Ö: {success}")
        print(f"üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(brands_data)}")
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {brands_data}")
        
        if not success:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤: {brands_data}")
            return
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüîç –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...")
        if isinstance(brands_data, dict):
            print(f"üìä –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
            for i, (key, value) in enumerate(brands_data.items()):
                print(f"   {i+1}. –ö–ª—é—á: {key}")
                print(f"      –ó–Ω–∞—á–µ–Ω–∏–µ: {value}")
                print(f"      –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è: {type(value)}")
                if i >= 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    break
        else:
            print(f"üìä –≠—Ç–æ {type(brands_data)} —Å {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º _search_articles_by_brand
        print(f"\nüîç –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ _search_articles_by_brand...")
        
        if isinstance(brands_data, dict):
            first_item = list(brands_data.values())[0]
            brand_name = first_item.get('brand', '')
            article_code = first_item.get('number', 'test123')
            
            print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å brand_name='{brand_name}', article_code='{article_code}'")
            
            try:
                success, articles_data = supplier._search_articles_by_brand(article_code, brand_name)
                print(f"   ‚úÖ –£—Å–ø–µ—Ö: {success}")
                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {articles_data}")
                print(f"   üìä –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(articles_data)}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                traceback.print_exc()
        
        # –®–∞–≥ 4: –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –º–µ—Ç–æ–¥ —Å –æ—Ç–ª–∞–¥–∫–æ–π
        print(f"\nüîç –®–∞–≥ 4: –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç get_product_analogs...")
        try:
            success, result = supplier.get_product_analogs('test123')
            print(f"‚úÖ –£—Å–ø–µ—Ö: {success}")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_product_analogs: {e}")
            traceback.print_exc()
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    detailed_debug()
