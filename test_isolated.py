#!/usr/bin/env python
"""
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ –≤—ã–∑–æ–≤–æ–≤ –∫ API
"""

import os
import django
import traceback
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

# –ú–æ–Ω–∫–µ–π-–ø–∞—Ç—á–∏–Ω–≥ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç API
def mock_search_articles_by_brand(self, article, brand):
    """–ú–æ–∫ –º–µ—Ç–æ–¥ _search_articles_by_brand"""
    print(f"üé≠ MOCK: _search_articles_by_brand('{article}', '{brand}')")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    if article == "ERROR_ARTICLE":
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –∫–æ—Ä—Ç–µ–∂–∞
        return "–û—à–∏–±–∫–∞ API"  # –≠–¢–û –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ò–°–¢–û–ß–ù–ò–ö–û–ú –ü–†–û–ë–õ–ï–ú–´!
    elif article == "EMPTY_ARTICLE":
        return False, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    elif article == "SUCCESS_ARTICLE":
        return True, [
            {
                'articleCode': article,
                'articleCodeFix': article,
                'brand': brand,
                'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
                'price': 100.0,
                'availability': 5,
                'deliveryPeriod': 1,
                'weight': '0.5',
                'articleId': 'test123'
            }
        ]
    else:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        return True, "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"  # –ò –≠–¢–û –¢–û–ñ–ï!

def test_isolated():
    """–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier = Supplier.objects.filter(api_type='autoparts').first()
        
        if not supplier:
            print("‚ùå ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –Ω–∞ –º–æ–∫
        original_method = supplier._search_articles_by_brand
        supplier._search_articles_by_brand = lambda article, brand: mock_search_articles_by_brand(supplier, article, brand)
        
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier.name}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º brands_data –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
        fake_brands_data = {
            "testBrand1": {
                "availability": 1,
                "brand": "TestBrand",
                "description": "",
                "number": "SUCCESS_ARTICLE",
                "numberFix": "SUCCESS_ARTICLE"
            },
            "testBrand2": {
                "availability": 1,
                "brand": "ErrorBrand",
                "description": "",
                "number": "ERROR_ARTICLE",
                "numberFix": "ERROR_ARTICLE"
            }
        }
        
        print(f"üìä –ò–º–∏—Ç–∏—Ä—É–µ–º brands_data: {fake_brands_data}")
        
        # –¢–µ–ø–µ—Ä—å –∏–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –≤ get_product_analogs
        try:
            article = "TEST123"
            brand = None
            limit = 20
            
            brands_data = fake_brands_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
            if not isinstance(brands_data, (list, dict)):
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ: {type(brands_data)}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ (–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å)
            if isinstance(brands_data, dict) and 'errorCode' in brands_data:
                error_code = brands_data.get('errorCode')
                error_message = brands_data.get('errorMessage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"‚ùå ABCP API –æ—à–∏–±–∫–∞ {error_code}: {error_message}")
                return
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π
            if isinstance(brands_data, dict):
                print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫...")
                brands_list = []
                for key, value in brands_data.items():
                    print(f"  –ö–ª—é—á: {key}, –ó–Ω–∞—á–µ–Ω–∏–µ: {type(value)}")
                    if isinstance(value, dict) and ('brand' in value or 'number' in value):
                        brands_list.append(value)
                        print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫ —Å–ø–∏—Å–∫—É")
                    else:
                        print(f"    ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω")
                brands_data = brands_list
                print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å —Å–ø–∏—Å–æ–∫
            if not isinstance(brands_data, list):
                print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω {type(brands_data)}")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ dict
            original_count = len(brands_data)
            brands_data = [item for item in brands_data if isinstance(item, dict)]
            print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ dict –æ–±—ä–µ–∫—Ç—ã: {original_count} -> {len(brands_data)}")
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—Ä–µ–Ω–¥, —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            if brand:
                print(f"üîé –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥—É: {brand}")
                brands_data = [b for b in brands_data if isinstance(b, dict) and b.get('brand', '').lower() == brand.lower()]
                print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±—Ä–µ–Ω–¥—É: {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if limit and len(brands_data) > limit:
                brands_data = brands_data[:limit]
                print(f"‚úÇÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ {limit} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            analogs = []
            for i, brand_info in enumerate(brands_data):
                print(f"\n--- –ë—Ä–µ–Ω–¥ {i+1} ---")
                print(f"–¢–∏–ø: {type(brand_info)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–≤–∞—Ä—å
                if not isinstance(brand_info, dict):
                    print(f"‚ùå –ù–µ dict, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                    
                brand_name = brand_info.get('brand', '')
                article_code = brand_info.get('number', article)
                print(f"–ë—Ä–µ–Ω–¥: {brand_name}")
                print(f"–ê—Ä—Ç–∏–∫—É–ª: {article_code}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
                print(f"üì° –í—ã–∑—ã–≤–∞–µ–º _search_articles_by_brand...")
                
                try:
                    result = supplier._search_articles_by_brand(article_code, brand_name)
                    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
                    
                    # –ó–î–ï–°–¨ –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–†–û–ë–õ–ï–ú–ê!
                    if isinstance(result, tuple) and len(result) == 2:
                        success, articles_data = result
                        print(f"success: {success}, articles_data: {type(articles_data)}")
                    else:
                        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")
                        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∫–æ—Ä—Ç–µ–∂, –∞ —Å—Ç—Ä–æ–∫–∞, —Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–¥–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞
                        success = False
                        articles_data = result  # –≠–¢–û –ú–û–ñ–ï–¢ –ë–´–¢–¨ –°–¢–†–û–ö–ê!
                    
                    if success and articles_data:
                        print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º articles_data: {type(articles_data)}")
                        
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ articles_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
                        if isinstance(articles_data, dict):
                            if 'articles' in articles_data:
                                products_list = articles_data['articles']
                                print(f"–ù–∞–π–¥–µ–Ω –∫–ª—é—á 'articles': {type(products_list)}")
                            elif 'data' in articles_data:
                                products_list = articles_data['data']
                                print(f"–ù–∞–π–¥–µ–Ω –∫–ª—é—á 'data': {type(products_list)}")
                            else:
                                products_list = [articles_data]  # –ï–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
                                print(f"–°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞")
                        elif isinstance(articles_data, list):
                            products_list = articles_data
                            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–ø–∏—Å–æ–∫")
                        else:
                            # –í–û–¢ –û–ù–ê –ü–†–û–ë–õ–ï–ú–ê! –ï—Å–ª–∏ articles_data - —Å—Ç—Ä–æ–∫–∞, —Ç–æ –º—ã –ø–æ–ø–∞–¥–∞–µ–º —Å—é–¥–∞
                            print(f"‚ùå articles_data –Ω–µ —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(articles_data)}")
                            print(f"–ó–Ω–∞—á–µ–Ω–∏–µ: {articles_data}")
                            
                            # –ê –ø–æ—Ç–æ–º –≥–¥–µ-—Ç–æ –≤ –∫–æ–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å .get() –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
                            continue
                        
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                        if not isinstance(products_list, list):
                            print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω {type(products_list)}")
                            continue
                            
                        print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(products_list)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                        
                        for j, product in enumerate(products_list):
                            print(f"  –ü—Ä–æ–¥—É–∫—Ç {j+1}: {type(product)}")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                            if not isinstance(product, dict):
                                print(f"    ‚ùå –ù–µ dict, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                continue
                                
                            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–æ–≥ - –ó–î–µ—Å—å —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –µ—Å–ª–∏ product - —Å—Ç—Ä–æ–∫–∞
                            try:
                                analog = {
                                    'article': product.get('articleCode', article_code),
                                    'article_fix': product.get('articleCodeFix', article_code),
                                    'brand': product.get('brand', brand_name),
                                    'name': product.get('description', ''),
                                    'price': product.get('price', 0),
                                    'availability': product.get('availability', 0),
                                    'delivery_period': product.get('deliveryPeriod', 0),
                                    'weight': product.get('weight', '0'),
                                    'article_id': product.get('articleId', ''),
                                    'is_original': brand_name.lower() == brand.lower() if brand else False
                                }
                                analogs.append(analog)
                                print(f"    ‚úÖ –ê–Ω–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω: {analog['article']} {analog['brand']}")
                                
                            except Exception as e:
                                print(f"    ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–æ–≥–∞: {e}")
                                print(f"    –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {type(product)}")
                                print(f"    –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
                                traceback.print_exc()
                                
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö: success={success}, articles_data={articles_data}")
                        
                except Exception as e:
                    print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–µ–Ω–¥–∞: {e}")
                    traceback.print_exc()
            
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {len(analogs)}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            supplier._search_articles_by_brand = original_method
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            traceback.print_exc()
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    test_isolated()
