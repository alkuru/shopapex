#!/usr/bin/env python
"""
–õ–æ–≤–∏–º –æ—à–∏–±–∫—É —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π —Å—Ç–µ–∫–∞
"""

import os
import django
import traceback
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def trace_error():
    """–õ–æ–≤–∏–º –æ—à–∏–±–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier = Supplier.objects.filter(api_type='autoparts').first()
        
        if not supplier:
            print("‚ùå ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier.name}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π
        print(f"\nüéØ –í—ã–∑—ã–≤–∞–µ–º get_product_analogs —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
        
        try:
            success, result = supplier.get_product_analogs(
                article="1234567890",
                brand=None,  # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±—Ä–µ–Ω–¥—É
                limit=5
            )
            
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: success={success}")
            if success:
                print(f"–ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {result.get('total_found', 0)}")
            else:
                print(f"–û—à–∏–±–∫–∞: {result}")
                
        except AttributeError as e:
            if "'str' object has no attribute 'get'" in str(e):
                print(f"üéØ –ü–û–ô–ú–ê–õ–ò –û–®–ò–ë–ö–£: {e}")
                print(f"üìç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞:")
                
                # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
                exc_type, exc_value, exc_traceback = sys.exc_info()
                tb_lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
                
                for line in tb_lines:
                    print(line.rstrip())
                    
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è .get()
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –º–µ—Å—Ç–∞ –æ—à–∏–±–∫–∏:")
                
                tb = exc_traceback
                while tb is not None:
                    frame = tb.tb_frame
                    filename = frame.f_code.co_filename
                    lineno = tb.tb_lineno
                    func_name = frame.f_code.co_name
                    
                    if 'catalog/models.py' in filename:
                        print(f"  üìÅ –§–∞–π–ª: {filename}")
                        print(f"  üìÑ –°—Ç—Ä–æ–∫–∞: {lineno}")
                        print(f"  üîß –§—É–Ω–∫—Ü–∏—è: {func_name}")
                        
                        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —Ñ—Ä–µ–π–º–µ
                        local_vars = frame.f_locals
                        print(f"  üìä –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
                        for var_name, var_value in local_vars.items():
                            if isinstance(var_value, str) and len(var_value) < 200:
                                print(f"    {var_name} (str): {var_value}")
                            else:
                                print(f"    {var_name} ({type(var_value).__name__}): {str(var_value)[:50]}...")
                        
                        print(f"  ‚îÄ" * 50)
                    
                    tb = tb.tb_next
                    
            else:
                print(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ AttributeError: {e}")
                traceback.print_exc()
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            traceback.print_exc()
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    trace_error()
