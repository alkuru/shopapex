#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, ProductAnalog, Brand, ProductCategory
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –¢–ï–°–¢–û–í–´–• –¢–û–í–ê–†–û–í")
    print("=" * 40)
    
    # –ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    total_products = Product.objects.count()
    print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {total_products}")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    test_patterns = [
        'TEST',
        'ANALOG',
        'C30005',
        'BRP1078',
        'FAKE',
        'DEMO',
        'SAMPLE'
    ]
    
    test_products = []
    for pattern in test_patterns:
        products = Product.objects.filter(article__icontains=pattern)
        test_products.extend(products)
        if products.exists():
            print(f"üîç –¢–æ–≤–∞—Ä—ã —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º '{pattern}': {products.count()}")
            for product in products[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {product.article}: {product.name}")
            if products.count() > 5:
                print(f"   ... –∏ –µ—â–µ {products.count() - 5} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    unique_test_ids = set(p.id for p in test_products)
    unique_test_count = len(unique_test_ids)
    
    print(f"\nüìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {unique_test_count}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∞–Ω–∞–ª–æ–≥–∏
    test_analogs = ProductAnalog.objects.filter(
        product__article__in=[p.article for p in test_products]
    ).count()
    
    analog_of_test = ProductAnalog.objects.filter(
        analog_product__article__in=[p.article for p in test_products]
    ).count()
    
    print(f"üìä –°–≤—è–∑–µ–π –∞–Ω–∞–ª–æ–≥–æ–≤ –æ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {test_analogs}")
    print(f"üìä –°–≤—è–∑–µ–π –∞–Ω–∞–ª–æ–≥–æ–≤ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ç–æ–≤–∞—Ä–∞–º: {analog_of_test}")
    
    # –¢–æ–≤–∞—Ä—ã —Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã–µ)
    short_articles = Product.objects.filter(article__regex=r'^.{1,3}$')
    if short_articles.exists():
        print(f"\nüîç –¢–æ–≤–∞—Ä—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ (1-3 —Å–∏–º–≤–æ–ª–∞): {short_articles.count()}")
        for product in short_articles:
            print(f"   - {product.article}: {product.name}")
    
    # –¢–æ–≤–∞—Ä—ã –±–µ–∑ –±—Ä–µ–Ω–¥–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã–µ)
    no_brand_products = Product.objects.filter(brand__isnull=True)
    if no_brand_products.exists():
        print(f"\nüîç –¢–æ–≤–∞—Ä—ã –±–µ–∑ –±—Ä–µ–Ω–¥–æ–≤: {no_brand_products.count()}")
        for product in no_brand_products[:10]:
            print(f"   - {product.article}: {product.name}")
    
    print("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
