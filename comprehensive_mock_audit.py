#!/usr/bin/env python
"""
–ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö mock-–∑–∞–≥–ª—É—à–µ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ production
ShopApex - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π
"""

import os
import sys
import re
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from django.conf import settings
from catalog.models import Supplier, APIMonitorLog

def audit_django_settings():
    """–ê—É–¥–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django"""
    print("üîß –ê–£–î–ò–¢ –ù–ê–°–¢–†–û–ï–ö DJANGO:")
    print("=" * 50)
    
    # DEBUG —Ä–µ–∂–∏–º
    debug_status = "üî¥ –í–ö–õ–Æ–ß–ï–ù (–û–ü–ê–°–ù–û!)" if settings.DEBUG else "‚úÖ –í–´–ö–õ–Æ–ß–ï–ù"
    print(f"   DEBUG: {debug_status}")
    
    # SECRET_KEY
    secret_key = getattr(settings, 'SECRET_KEY', '')
    is_default_key = 'django-insecure' in secret_key
    secret_status = "üî¥ –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –î–ï–§–û–õ–¢–ù–´–ô –ö–õ–Æ–ß!" if is_default_key else "‚úÖ –ù–ê–°–¢–†–û–ï–ù"
    print(f"   SECRET_KEY: {secret_status}")
    
    # ALLOWED_HOSTS
    allowed_hosts = getattr(settings, 'ALLOWED_HOSTS', [])
    has_localhost = any(host in ['localhost', '127.0.0.1', 'testserver'] for host in allowed_hosts)
    hosts_status = "üü° –°–û–î–ï–†–ñ–ò–¢ –¢–ï–°–¢–û–í–´–ï –•–û–°–¢–´" if has_localhost else "‚úÖ –ù–ê–°–¢–†–û–ï–ù–´"
    print(f"   ALLOWED_HOSTS: {hosts_status} {allowed_hosts}")
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    db_engine = settings.DATABASES['default']['ENGINE']
    is_sqlite = 'sqlite3' in db_engine
    db_status = "üü° SQLite (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è PostgreSQL)" if is_sqlite else "‚úÖ Production DB"
    print(f"   DATABASE: {db_status}")
    
    print()

def audit_supplier_mock_settings():
    """–ê—É–¥–∏—Ç mock –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    print("ü§ñ –ê–£–î–ò–¢ MOCK –ù–ê–°–¢–†–û–ï–ö –ü–û–°–¢–ê–í–©–ò–ö–û–í:")
    print("=" * 50)
    
    try:
        suppliers = Supplier.objects.all()
        
        if not suppliers.exists():
            print("   ‚ö†Ô∏è  –ü–û–°–¢–ê–í–©–ò–ö–ò –ù–ï –ù–ê–ô–î–ï–ù–´")
            return
        
        mock_enabled = []
        mock_disabled = []
        
        for supplier in suppliers:
            print(f"\nüì¶ {supplier.name}:")
            print(f"   üîó API URL: {supplier.api_url}")
            print(f"   üîê API Login: {'‚úÖ –ï—Å—Ç—å' if supplier.api_login else '‚ùå –ù–µ—Ç'}")
            print(f"   üîë API Password: {'‚úÖ –ï—Å—Ç—å' if supplier.api_password else '‚ùå –ù–µ—Ç'}")
            print(f"   üë§ Admin Login: {'‚úÖ –ï—Å—Ç—å' if supplier.admin_login else '‚ùå –ù–µ—Ç'}")
            print(f"   üîí Admin Password: {'‚úÖ –ï—Å—Ç—å' if supplier.admin_password else '‚ùå –ù–µ—Ç'}")
            
            if hasattr(supplier, 'use_mock_admin_api'):
                mock_status = "üî¥ –í–ö–õ–Æ–ß–ï–ù" if supplier.use_mock_admin_api else "‚úÖ –í–´–ö–õ–Æ–ß–ï–ù"
                print(f"   ü§ñ Mock —Ä–µ–∂–∏–º: {mock_status}")
                
                if supplier.use_mock_admin_api:
                    mock_enabled.append(supplier.name)
                else:
                    mock_disabled.append(supplier.name)
            
            print(f"   üìç Office ID: {supplier.office_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"   üì¶ Online Stocks: {'–î–∞' if supplier.use_online_stocks else '–ù–µ—Ç'}")
            print(f"   üöö Default Address: {supplier.default_shipment_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"   ‚ö° –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if supplier.is_active else '–ù–µ—Ç'}")
        
        print(f"\nüìä –°–í–û–î–ö–ê MOCK –†–ï–ñ–ò–ú–û–í:")
        print(f"   üî¥ Mock –≤–∫–ª—é—á–µ–Ω: {len(mock_enabled)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        for name in mock_enabled:
            print(f"      - {name}")
        
        print(f"   ‚úÖ Mock –≤—ã–∫–ª—é—á–µ–Ω: {len(mock_disabled)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        for name in mock_disabled:
            print(f"      - {name}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")
    
    print()

def audit_code_mock_methods():
    """–ê—É–¥–∏—Ç mock –º–µ—Ç–æ–¥–æ–≤ –≤ –∫–æ–¥–µ"""
    print("üîç –ê–£–î–ò–¢ MOCK –ú–ï–¢–û–î–û–í –í –ö–û–î–ï:")
    print("=" * 50)
    
    # –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_check = [
        'catalog/models.py',
        'catalog/admin.py', 
        'catalog/views.py',
        'catalog/web_views.py'
    ]
    
    mock_patterns = [
        r'use_mock_admin_api',
        r'_get_mock_admin_data',
        r'mock_data\s*=',
        r'Mock\s+API',
        r'mock.*—Ä–µ–∂–∏–º',
        r'test.*data',
        r'fake.*data'
    ]
    
    for file_path in files_to_check:
        full_path = os.path.join(os.getcwd(), file_path)
        if os.path.exists(full_path):
            print(f"\nüìÅ {file_path}:")
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            found_mocks = []
            for i, line in enumerate(content.split('\n'), 1):
                for pattern in mock_patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        found_mocks.append(f"   –°—Ç—Ä–æ–∫–∞ {i}: {line.strip()}")
            
            if found_mocks:
                print(f"   ü§ñ –ù–∞–π–¥–µ–Ω–æ {len(found_mocks)} mock —Å—Å—ã–ª–æ–∫:")
                for mock in found_mocks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(mock)
                if len(found_mocks) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(found_mocks) - 5} —Å—Å—ã–ª–æ–∫")
            else:
                print("   ‚úÖ Mock —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print()

def audit_test_files():
    """–ê—É–¥–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print("üß™ –ê–£–î–ò–¢ –¢–ï–°–¢–û–í–´–• –§–ê–ô–õ–û–í:")
    print("=" * 50)
    
    test_patterns = [
        'test_*.py',
        'demo_*.py',
        '*_test.py',
        'audit_*.py',
        'create_debug*.py'
    ]
    
    test_files = []
    for pattern in test_patterns:
        import glob
        test_files.extend(glob.glob(pattern))
    
    if test_files:
        print(f"   üìù –ù–∞–π–¥–µ–Ω–æ {len(test_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for file in test_files:
            size = os.path.getsize(file) / 1024  # KB
            print(f"      - {file} ({size:.1f} KB)")
    else:
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print()

def audit_environment_files():
    """–ê—É–¥–∏—Ç —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üåç –ê–£–î–ò–¢ –§–ê–ô–õ–û–í –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print("=" * 50)
    
    env_files = ['.env', '.env.example', '.env.local', '.env.production']
    
    for env_file in env_files:
        if os.path.exists(env_file):
            print(f"   üìÑ {env_file}: ‚úÖ –ù–∞–π–¥–µ–Ω")
            with open(env_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if 'DEBUG=True' in content:
                print(f"      üî¥ DEBUG=True –Ω–∞–π–¥–µ–Ω!")
            if 'django-insecure' in content:
                print(f"      üî¥ –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π SECRET_KEY!")
        else:
            print(f"   üìÑ {env_file}: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
    
    print()

def check_api_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ API –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ê–£–î–ò–¢ –õ–û–ì–û–í API:")
    print("=" * 50)
    
    try:
        recent_logs = APIMonitorLog.objects.order_by('-created_at')[:10]
        
        if recent_logs:
            print(f"   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_logs)} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤:")
            for log in recent_logs:
                status = "‚úÖ" if log.status == 'success' else "‚ùå"
                print(f"      {status} {log.supplier.name} - {log.method} ({log.created_at.strftime('%H:%M:%S')})")
        else:
            print("   üìù –õ–æ–≥–∏ API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤: {e}")
    
    print()

def generate_production_checklist():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ–∫–ª–∏—Å—Ç –¥–ª—è production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    print("‚úÖ –ß–ï–ö–õ–ò–°–¢ –î–õ–Ø PRODUCTION:")
    print("=" * 50)
    
    checklist_items = [
        "üîß –ù–ê–°–¢–†–û–ô–ö–ò DJANGO:",
        "   [ ] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å DEBUG=False –≤ .env",
        "   [ ] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π SECRET_KEY",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å ALLOWED_HOSTS —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å STATIC_ROOT –∏ MEDIA_ROOT",
        "   [ ] –í–∫–ª—é—á–∏—Ç—å HTTPS (SECURE_SSL_REDIRECT=True)",
        "",
        "ü§ñ MOCK –ù–ê–°–¢–†–û–ô–ö–ò:",
        "   [ ] –û—Ç–∫–ª—é—á–∏—Ç—å use_mock_admin_api —É –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
        "   [ ] –í–Ω–µ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ admin_login/admin_password",
        "   [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å api_url",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å office_id –¥–ª—è ABCP",
        "   [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å use_online_stocks",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å default_shipment_address",
        "",
        "üóÉÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:",
        "   [ ] –°–æ–∑–¥–∞—Ç—å production –º–∏–≥—Ä–∞—Ü–∏–∏",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å backup —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
        "   [ ] –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "",
        "üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
        "   [ ] –í–∫–ª—é—á–∏—Ç—å CSRF –∑–∞—â–∏—Ç—É",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å rate limiting",
        "   [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ",
        "",
        "üöÄ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï:",
        "   [ ] –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (test_*.py, demo_*.py)",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "   [ ] –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "   [ ] –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ API endpoints",
        "   [ ] –°–æ–∑–¥–∞—Ç—å documentation –¥–ª—è API"
    ]
    
    for item in checklist_items:
        print(item)
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É–¥–∏—Ç–∞"""
    print("üîç –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ MOCK –ó–ê–ì–õ–£–®–ï–ö - SHOPAPEX")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é\n")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    audit_django_settings()
    audit_supplier_mock_settings()
    audit_code_mock_methods()
    audit_test_files()
    audit_environment_files()
    check_api_logs()
    generate_production_checklist()
    
    print("üéØ –ê–£–î–ò–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 60)
    print("üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ–∫–ª–∏—Å—Ç –≤—ã—à–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ production")
    print("üìß –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö credentials")
    print("üöÄ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –≤—ã–≥—Ä—É–∑–∫–µ")

if __name__ == "__main__":
    main()
