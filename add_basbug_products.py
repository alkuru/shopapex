#!/usr/bin/env python
import os
import sys
import django
import pandas as pd
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import MikadosProduct

def parse_quantity(quantity_value):
    """
    –ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    """
    if pd.isna(quantity_value):
        return 0
    
    quantity_str = str(quantity_value).strip()
    
    if not quantity_str:
        return 0
    
    if '>' in quantity_str:
        match = re.search(r'>(\d+)', quantity_str)
        if match:
            return int(match.group(1))
        else:
            return 1
    
    if '<' in quantity_str:
        match = re.search(r'<(\d+)', quantity_str)
        if match:
            return int(match.group(1))
        else:
            return 0
    
    if '=' in quantity_str:
        match = re.search(r'=(\d+)', quantity_str)
        if match:
            return int(match.group(1))
        else:
            return 0
    
    numbers = re.findall(r'\d+', quantity_str)
    if numbers:
        return int(numbers[0])
    
    return 0

def load_mikado_products(brand_name, count=5):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø—Ä–∞–π—Å–∞ –ú–∏–∫–∞–¥–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    """
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        excel_file = '/app/import/mikado_price_1.xlsx'
        df = pd.read_excel(excel_file)
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ –ø—Ä–∞–π—Å–∞")
        print(f"üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞: {brand_name}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥—É
        brand_products = df[df['BrandName'].str.contains(brand_name, case=False, na=False)]
        
        if brand_products.empty:
            print(f"‚ùå –¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ {brand_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–∞–π—Å–µ")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(brand_products)} —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ {brand_name}")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ count —Ç–æ–≤–∞—Ä–æ–≤
        selected_products = brand_products.head(count)
        
        created_count = 0
        skipped_count = 0
        
        for index, row in selected_products.iterrows():
            try:
                brand = str(row.get('BrandName', '')).strip()
                article = str(row.get('Code', '')).strip()
                name = str(row.get('Prodname', '')).strip()
                price = float(row.get('PriceOut', 0)) if pd.notna(row.get('PriceOut')) else 0
                stock_quantity = parse_quantity(row.get('QTY', 0))
                multiplicity = int(row.get('BatchQty', 1)) if pd.notna(row.get('BatchQty')) else 1
                unit = '—à—Ç'
                warehouse = '–¶–°-–ú–ö'
                code = str(row.get('Code', '')).strip()

                if brand and article and name:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    existing_product = MikadosProduct.objects.filter(
                        brand=brand,
                        article=article
                    ).first()

                    if existing_product:
                        print(f"‚ö†Ô∏è  –¢–æ–≤–∞—Ä {brand} {article} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        skipped_count += 1
                        continue

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    product = MikadosProduct.objects.create(
                        brand=brand,
                        article=article,
                        name=name,
                        price=price,
                        stock_quantity=stock_quantity,
                        multiplicity=multiplicity,
                        unit=unit,
                        warehouse=warehouse,
                        code=code
                    )
                    
                    created_count += 1
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {brand} {article} - {name[:50]}... (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stock_quantity})")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {str(e)}")
                continue
        
        print(f"\nüìà –ò–¢–û–ì–û:")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {created_count}")
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skipped_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–π—Å–∞: {str(e)}")

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python add_basbug_products.py <brand_name> [count]")
        print("–ü—Ä–∏–º–µ—Ä: python add_basbug_products.py BASBUG 5")
        sys.exit(1)
    
    brand_name = sys.argv[1]
    count = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    
    print(f"üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º {count} —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ {brand_name} –∏–∑ –ø—Ä–∞–π—Å–∞ –ú–∏–∫–∞–¥–æ...")
    load_mikado_products(brand_name, count) 