import os
import time
import django
import requests
from pathlib import Path
import pandas as pd

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

def wait_for_mikado_file():
    """–û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ import"""
    import_dir = Path(__file__).parent / 'import'
    print(f"üîç –û–∂–∏–¥–∞—é —Ñ–∞–π–ª Mikado –≤ –ø–∞–ø–∫–µ: {import_dir}")
    
    while True:
        # –ò—â–µ–º Excel —Ñ–∞–π–ª—ã
        excel_files = list(import_dir.glob('*.xlsx')) + list(import_dir.glob('*.xls'))
        
        if excel_files:
            latest_file = max(excel_files, key=os.path.getmtime)
            print(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {latest_file.name}")
            return latest_file
        
        print("‚è≥ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥—É 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)

def upload_mikado_file(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª Mikado —á–µ—Ä–µ–∑ API"""
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: {file_path.name}")
    
    df = pd.read_excel(file_path)
    total = len(df)
    print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {total}")
    
    url = "http://localhost:8000/api/upload-mikado/"
    
    try:
        with open(file_path, 'rb') as f:
            files = {'file': (file_path.name, f, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
            response = requests.post(url, files=files, timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {data.get('created', 0)}")
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {data.get('updated', 0)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                print(response.text)
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    for i in range(0, total, max(1, total // 100)):
        percent = int(i / total * 100)
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞: {percent}%")
        time.sleep(0.01)
    print("–ó–∞–≥—Ä—É–∑–∫–∞: 100%")

def update_brands():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±—Ä–µ–Ω–¥—ã Mikado"""
    print("\nüîß –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤...")
    
    url = "http://localhost:8000/api/update-mikado-brands/"
    
    try:
        response = requests.post(url, timeout=300)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {data.get('updated', 0)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤: {response.status_code}")
            print(response.text)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def main():
    print("üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê MIKADO")
    print("=" * 50)
    
    # –ñ–¥–µ–º —Ñ–∞–π–ª
    file_path = wait_for_mikado_file()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º
    if upload_mikado_file(file_path):
        print("\nüéâ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–µ–Ω–¥—ã
        if update_brands():
            print("\nüéâ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print("üìä Mikado –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            print("\n‚ö†Ô∏è –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    main() 