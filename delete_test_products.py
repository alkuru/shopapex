#!/usr/bin/env python3
"""
–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, ProductAnalog
    
    print("üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –¢–û–í–ê–†–û–í")
    print("=" * 40)
    
    # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
    total_before = Product.objects.count()
    print(f"üìä –¢–æ–≤–∞—Ä–æ–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {total_before}")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    test_patterns = [
        'BRP1',  # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏
        'FL1',   # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        'AF1',   # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–∑–¥—É—à–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        'SP1',   # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–≤–µ—á–∏
        'SH1',   # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã
        'CV1',   # –¢–µ—Å—Ç–æ–≤—ã–µ –®–†–£–°—ã
        'BK1',   # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∏—Å–∫–∏
        'WP1',   # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å–æ—Å—ã
        'TB1',   # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–º–Ω–∏
        'CL1',   # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–ø–ª–µ–Ω–∏—è
        '-ANALOG',  # –í—Å–µ –∞–Ω–∞–ª–æ–≥–∏
        'K20PBR-S10',  # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        'TRW-',    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏
        'ATE-',    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏
        'Febi-',   # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏
    ]
    
    deleted_count = 0
    
    for pattern in test_patterns:
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        products_to_delete = Product.objects.filter(article__contains=pattern)
        count = products_to_delete.count()
        
        if count > 0:
            print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º {count} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º '{pattern}'")
            products_to_delete.delete()
            deleted_count += count
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–¢–æ–≤–∞—Ä"
    test_products = Product.objects.filter(name__startswith='–¢–æ–≤–∞—Ä ')
    count = test_products.count()
    if count > 0:
        print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º {count} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–¢–æ–≤–∞—Ä'")
        test_products.delete()
        deleted_count += count
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–ê–Ω–∞–ª–æ–≥"
    analog_products = Product.objects.filter(name__contains='–ê–Ω–∞–ª–æ–≥')
    count = analog_products.count()
    if count > 0:
        print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º {count} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–ê–Ω–∞–ª–æ–≥'")
        analog_products.delete()
        deleted_count += count
    
    # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    total_after = Product.objects.count()
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –£–î–ê–õ–ï–ù–ò–Ø:")
    print(f"   –¢–æ–≤–∞—Ä–æ–≤ –±—ã–ª–æ: {total_before}")
    print(f"   –£–¥–∞–ª–µ–Ω–æ: {deleted_count}")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {total_after}")
    
    # –ü–æ–∫–∞–∂–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã
    remaining_products = Product.objects.all()[:10]
    print(f"\nüìã –û–°–¢–ê–í–®–ò–ï–°–Ø –¢–û–í–ê–†–´ (–ø–µ—Ä–≤—ã–µ 10):")
    
    if remaining_products.count() == 0:
        print("   –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ")
    else:
        for i, product in enumerate(remaining_products, 1):
            print(f"   {i}. {product.article} - {product.name}")
    
    print(f"\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
