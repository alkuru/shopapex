#!/usr/bin/env python
import os
import django
import pandas as pd
from django.db import transaction

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import MikadoProduct

def main():
    print("=== –ë–ï–ó–û–ü–ê–°–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–†–ï–ù–î–û–í MIKADO ===")
    
    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    file_path = "import/mikado_price_1.xlsx"
    
    try:
        df = pd.read_excel(file_path)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Å {len(df)} —Ç–æ–≤–∞—Ä–∞–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å: –∞—Ä—Ç–∏–∫—É–ª -> –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥
        article_to_brand = {}
        for _, row in df.iterrows():
            article = str(row['Code']).strip()
            brand = str(row['BrandName']).strip()
            article_to_brand[article] = brand
        
        print(f"–°–æ–∑–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å –¥–ª—è {len(article_to_brand)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        updated_count = 0
        total_products = MikadoProduct.objects.count()
        
        print("–ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        batch_size = 1000
        processed = 0
        
        with transaction.atomic():
            all_products = MikadoProduct.objects.all()
            
            for product in all_products:
                article = product.article.strip()
                
                if article in article_to_brand:
                    correct_brand = article_to_brand[article]
                    
                    # –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                    if product.brand != correct_brand:
                        old_brand = product.brand
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞—Å—Ç –ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç
                        existing = MikadoProduct.objects.filter(
                            brand=correct_brand, 
                            article=article
                        ).exclude(id=product.id)
                        
                        if existing.exists():
                            # –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
                            print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç {article} ({old_brand})")
                            product.delete()
                        else:
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±—Ä–µ–Ω–¥
                            product.brand = correct_brand
                            product.save()
                            updated_count += 1
                            
                            if updated_count <= 20:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                                print(f"‚úÖ {article}: '{old_brand}' -> '{correct_brand}'")
                
                processed += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 —Ç–æ–≤–∞—Ä–æ–≤
                if processed % 10000 == 0:
                    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total_products} —Ç–æ–≤–∞—Ä–æ–≤, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {updated_count}")
        
        print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
        print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
        print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {updated_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–∞—Ö
        print(f"\n=== –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===")
        test_articles = ["610.3718.20", "610.3719.20", "610.3715.20"]
        
        for article in test_articles:
            products = MikadoProduct.objects.filter(article=article)
            if products.exists():
                product = products.first()
                expected_brand = article_to_brand.get(article, "–ù–ï –ù–ê–ô–î–ï–ù")
                status = "‚úÖ" if product.brand == expected_brand else "‚ùå"
                print(f"{status} {article}: {product.brand} (–æ–∂–∏–¥–∞–ª—Å—è: {expected_brand})")
            else:
                expected_brand = article_to_brand.get(article, "–ù–ï –ù–ê–ô–î–ï–ù")
                print(f"‚ùå {article}: –ù–ï –ù–ê–ô–î–ï–ù –í –ë–ê–ó–ï (–æ–∂–∏–¥–∞–ª—Å—è: {expected_brand})")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
        print(f"\n=== –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –ë–†–ï–ù–î–û–í ===")
        mannfilter_brake_discs = MikadoProduct.objects.filter(
            brand="MANN-FILTER",
            name__icontains="–¥–∏—Å–∫ —Ç–æ—Ä–º–æ–∑–Ω–æ–π"
        ).count()
        print(f"–¢–æ—Ä–º–æ–∑–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ —Å –±—Ä–µ–Ω–¥–æ–º MANN-FILTER: {mannfilter_brake_discs}")
        
        if mannfilter_brake_discs == 0:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
        else:
            print(f"‚ùå –û—Å—Ç–∞–ª–æ—Å—å {mannfilter_brake_discs} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        print(f"\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main() 