#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã —á–µ—Ä–µ–∑ ABCP API
"""

import os
import sys
import django
import time
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, ProductAnalog, Brand, ProductCategory
    from catalog.supplier_models import Supplier
    
    print("üîç –ó–ê–ì–†–£–ó–ö–ê –†–ï–ê–õ–¨–ù–´–• –ê–ù–ê–õ–û–ì–û–í")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    products = Product.objects.all()[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    print(f"üìä –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è {products.count()} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤
    supplier = Supplier()
    
    total_analogs_found = 0
    
    for i, product in enumerate(products, 1):
        print(f"\n[{i}/{products.count()}] –ò—â–µ–º –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è: {product.article} - {product.name}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–æ–≥–∏ —á–µ—Ä–µ–∑ API
            analogs = supplier.get_product_analogs(product.article, product.brand.name if product.brand else None)
            
            if not analogs:
                print(f"   ‚ùå –ê–Ω–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                continue
            
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(analogs)} –∞–Ω–∞–ª–æ–≥–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–Ω–∞–ª–æ–≥
            analog_count = 0
            for analog_data in analogs[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –∞–Ω–∞–ª–æ–≥–æ–≤
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∞
                    if isinstance(analog_data, dict):
                        analog_article = analog_data.get('article', '')
                        analog_name = analog_data.get('name', '')
                        analog_brand = analog_data.get('brand', '')
                        analog_price = analog_data.get('price', 0)
                    else:
                        print(f"   ‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–∞: {analog_data}")
                        continue
                    
                    if not analog_article:
                        continue
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥
                    if analog_brand:
                        brand, _ = Brand.objects.get_or_create(
                            name=analog_brand,
                            defaults={'description': f'–ë—Ä–µ–Ω–¥ {analog_brand}'}
                        )
                    else:
                        brand = product.brand
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä-–∞–Ω–∞–ª–æ–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    analog_product, created = Product.objects.get_or_create(
                        article=analog_article,
                        defaults={
                            'name': analog_name or f'–ê–Ω–∞–ª–æ–≥ {analog_article}',
                            'category': product.category,
                            'brand': brand,
                            'price': float(analog_price) if analog_price else product.price,
                            'description': f"–ê–Ω–∞–ª–æ–≥ –¥–ª—è {product.article}"
                        }
                    )
                    
                    if created:
                        print(f"   ‚ûï –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä-–∞–Ω–∞–ª–æ–≥: {analog_product.article}")
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –∞–Ω–∞–ª–æ–≥–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ —Ç–æ–≤–∞—Ä)
                    if analog_product.article != product.article:
                        analog_relation, created = ProductAnalog.objects.get_or_create(
                            product=product,
                            analog_product=analog_product
                        )
                        
                        if created:
                            print(f"   üîó –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å: {product.article} -> {analog_product.article}")
                            total_analogs_found += 1
                            analog_count += 1
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∞–ª–æ–≥–∞: {e}")
                    continue
            
            print(f"   üìà –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è {product.article}: {analog_count}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∞–ª–æ–≥–æ–≤: {e}")
            continue
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(random.uniform(1.0, 2.0))
    
    print(f"\nüéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏ —Å–æ–∑–¥–∞–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {total_analogs_found}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_products = Product.objects.count()
    products_with_analogs = Product.objects.filter(analogs__isnull=False).distinct().count()
    
    print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {total_products}")
    print(f"üìä –¢–æ–≤–∞—Ä–æ–≤ —Å –∞–Ω–∞–ª–æ–≥–∞–º–∏: {products_with_analogs}")
    print(f"üìä –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –∞–Ω–∞–ª–æ–≥–æ–≤: {ProductAnalog.objects.count()}")
    
    # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã
    print(f"\nüìã –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í –° –ê–ù–ê–õ–û–ì–ê–ú–ò:")
    for product in Product.objects.filter(analogs__isnull=False).distinct()[:5]:
        analog_count = product.analogs.count()
        print(f"   {product.article} - {product.name} ({analog_count} –∞–Ω–∞–ª–æ–≥–æ–≤)")
        for analog in product.analogs.all()[:3]:
            print(f"     ‚Üí {analog.analog_product.article} - {analog.analog_product.name}")
    
except Exception as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
