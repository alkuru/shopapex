#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier, Product
from django.db import models

def improve_product_data():
    """–£–ª—É—á—à–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–ª—É—á–∞—è –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    
    print("üîç –£–ª—É—á—à–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
    
    try:
        supplier = Supplier.objects.get(name__icontains='vinttop')
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.name}")
        
    except Supplier.DoesNotExist:
        print("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ VintTop.ru –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    products = Product.objects.filter(
        primary_supplier=supplier,
        name__in=['–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è']
    )
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {products.count()} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    
    improved_count = 0
    
    for product in products:
        print(f"\nüîß –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product.article}")
        
        try:
            # –ò—â–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            success, result = supplier.search_products_by_article(product.article)
            
            if success and isinstance(result, list) and len(result) > 0:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                item_data = result[0]
                
                if isinstance(item_data, dict):
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ª—É—á—à–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    possible_names = [
                        item_data.get('name'),
                        item_data.get('title'), 
                        item_data.get('description'),
                        f"{item_data.get('brand', 'NoName')} {product.article}"
                    ]
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    new_name = None
                    for name in possible_names:
                        if name and name.strip() and name.strip() not in ['–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è']:
                            new_name = name.strip()[:300]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                            break
                    
                    if new_name:
                        old_name = product.name
                        product.name = new_name
                        product.save()
                        
                        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
                        print(f"      –ë—ã–ª–æ: {old_name}")
                        print(f"      –°—Ç–∞–ª–æ: {new_name}")
                        improved_count += 1
                    else:
                        print(f"   ‚ö†Ô∏è  –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å")
                        
                    # –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    for key, value in item_data.items():
                        if key not in ['name', 'title'] and value:
                            print(f"      {key}: {str(value)[:100]}")
                else:
                    print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            else:
                print(f"   ‚ö†Ô∏è  –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {improved_count}")
    print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {products.count()}")
    
    return improved_count > 0

def test_search_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ"""
    
    print(f"\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ù–ê –°–ê–ô–¢–ï")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    products = Product.objects.filter(
        primary_supplier__name__icontains='vinttop'
    )[:5]
    
    if not products:
        print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    print(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ {products.count()} —Ç–æ–≤–∞—Ä–∞–º")
    
    test_queries = []
    
    for product in products:
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries.extend([
            product.article,
            product.brand.name,
            product.name.split()[0] if product.name.split() else product.article
        ])
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ
    test_queries = list(set([q for q in test_queries if q and len(q) >= 2]))
    
    print(f"üîé –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {test_queries[:5]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
    
    for query in test_queries[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
        
        # –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        local_results = Product.objects.filter(
            models.Q(name__icontains=query) |
            models.Q(article__icontains=query) |
            models.Q(brand__name__icontains=query)
        )[:5]
        
        print(f"   üìã –õ–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {local_results.count()}")
        
        for result in local_results:
            print(f"      ‚Ä¢ {result.article} - {result.name[:50]}")
    
    print(f"\n‚úÖ –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")
    return True

if __name__ == "__main__":
    print("üöÄ –£–ª—É—á—à–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞")
    print("=" * 60)
    
    try:
        # –£–ª—É—á—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
        improve_product_data()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_search_functionality()
        
        print(f"\nüéâ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∞–¥–º–∏–Ω–∫–µ: http://127.0.0.1:8000/admin/catalog/product/")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥: http://127.0.0.1:8000/catalog/")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫: http://127.0.0.1:8000/catalog/search/")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
