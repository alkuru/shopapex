#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π
"""

import requests
import json
import time
import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django –æ–∫—Ä—É–∂–µ–Ω–∏–µ
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def test_product_analogs_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π")
    print("="*60)
    
    # URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    base_url = "http://127.0.0.1:8000"
    api_url = f"{base_url}/catalog/product-analogs/"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    test_articles = [
        "0986452062",  # –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ BOSCH
        "BP1518",      # –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ BOSCH
        "F026407006",  # –í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä BOSCH  
        "1457434310",  # –ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä BOSCH
        "25-143800"    # –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ ATE
    ]
    
    for i, article in enumerate(test_articles, 1):
        print(f"\n{i}. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}")
        print("-" * 50)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'article': article,
            'limit': 10
        }
        
        try:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.get(api_url, params=params, timeout=30)
            
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {len(data.get('results', []))}")
                print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('count', 0)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                results = data.get('results', [])[:3]
                for j, analog in enumerate(results, 1):
                    print(f"\n   {j}. {analog.get('brand_name', 'N/A')} - {analog.get('article', 'N/A')}")
                    print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: {analog.get('name', 'N/A')}")
                    print(f"      –¶–µ–Ω–∞: {analog.get('price', 'N/A')} —Ä—É–±.")
                    print(f"      –ù–∞–ª–∏—á–∏–µ: {analog.get('availability', 'N/A')}")
                    print(f"      –ü–æ—Å—Ç–∞–≤—â–∏–∫: {analog.get('supplier_name', 'N/A')}")
                
                if len(data.get('results', [])) > 3:
                    print(f"   ... –∏ –µ—â—ë {len(data.get('results', [])) - 3} –∞–Ω–∞–ª–æ–≥–æ–≤")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
                except:
                    print(f"   –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
                
        except requests.exceptions.Timeout:
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫)")
        except requests.exceptions.ConnectionError:
            print("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        except Exception as e:
            print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if i < len(test_articles):
            print("\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫...")
            time.sleep(2)

def test_supplier_method():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥–µ–ª–∏"""
    print("\n\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –º–æ–¥–µ–ª–∏ Supplier.get_product_analogs")
    print("="*65)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier = Supplier.objects.filter(is_active=True).first()
        
        if not supplier:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫")
            return
            
        print(f"üè¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier.name}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª
        test_article = "0986452062"
        print(f"üîç –ò—â–µ–º –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {test_article}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
        result = supplier.get_product_analogs(test_article, limit=5)
        
        if result.get('success'):
            analogs = result.get('analogs', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {len(analogs)}")
            
            for i, analog in enumerate(analogs[:3], 1):
                print(f"\n   {i}. {analog.get('brand')} - {analog.get('article')}")
                print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: {analog.get('name', 'N/A')}")
                print(f"      –¶–µ–Ω–∞: {analog.get('price', 'N/A')}")
                print(f"      –ù–∞–ª–∏—á–∏–µ: {analog.get('availability', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")

def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä"""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        response = requests.get("http://127.0.0.1:8000", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –ü–û–ò–°–ö–ê –ê–ù–ê–õ–û–ì–û–í")
    print("="*60)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    if check_server_status():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        test_product_analogs_api()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
        test_supplier_method()
        
        print("\n\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("="*40)
        print("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—ã—à–µ")
        print("üîß –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–¥")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Django")
        print("üö® –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   python manage.py runserver")
