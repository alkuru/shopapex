#!/usr/bin/env python
"""
–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ ShopApex: Development ‚Üî Production
–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É mock –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def show_current_mode():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
    print("üîç –¢–ï–ö–£–©–ò–ô –†–ï–ñ–ò–ú SHOPAPEX:")
    print("=" * 50)
    
    try:
        suppliers = Supplier.objects.all()
        mock_enabled = suppliers.filter(use_mock_admin_api=True).count()
        mock_disabled = suppliers.filter(use_mock_admin_api=False).count()
        
        if mock_enabled > 0:
            print(f"   ü§ñ DEVELOPMENT –†–ï–ñ–ò–ú")
            print(f"   üìä Mock –≤–∫–ª—é—á–µ–Ω —É {mock_enabled} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            print(f"   üìä Mock –≤—ã–∫–ª—é—á–µ–Ω —É {mock_disabled} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        else:
            print(f"   üöÄ PRODUCTION –†–ï–ñ–ò–ú") 
            print(f"   üìä –í—Å–µ {mock_disabled} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from django.conf import settings
        print(f"   üîß DEBUG: {'üî¥ True' if settings.DEBUG else '‚úÖ False'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
        env_file = Path('.env')
        if env_file.exists():
            with open(env_file, 'r') as f:
                content = f.read()
                if 'DEBUG=True' in content:
                    print(f"   üìÑ .env: üî¥ Development –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                else:
                    print(f"   üìÑ .env: ‚úÖ Production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        else:
            print(f"   üìÑ .env: ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∂–∏–º–∞: {e}")
    
    print()

def switch_to_development():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤ development —Ä–µ–∂–∏–º (mock –¥–∞–Ω–Ω—ã–µ)"""
    print("ü§ñ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í DEVELOPMENT –†–ï–ñ–ò–ú:")
    print("=" * 50)
    
    try:
        suppliers = Supplier.objects.all()
        switched_count = 0
        
        for supplier in suppliers:
            if not supplier.use_mock_admin_api:
                supplier.use_mock_admin_api = True
                supplier.save()
                switched_count += 1
                print(f"   ‚úÖ {supplier.name}: Mock —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
            else:
                print(f"   ‚úÖ {supplier.name}: Mock —Ä–µ–∂–∏–º —É–∂–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: Mock —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω —É {switched_count} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º development .env –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        env_dev_content = """# Development –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ShopApex
DEBUG=True
SECRET_KEY=django-insecure-@8)8^!+((9bg7r_-p74d1da5gut(m(5%cn78za0nid(0dx#e-9
ALLOWED_HOSTS=localhost,127.0.0.1,testserver

# SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
DATABASE_URL=sqlite:///db.sqlite3

# Development –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
CELERY_TASK_ALWAYS_EAGER=True
"""
        
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_dev_content)
        
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω .env –¥–ª—è development")
        print("   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ development: {e}")
    
    print()

def switch_to_production():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤ production —Ä–µ–∂–∏–º (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
    print("üöÄ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í PRODUCTION –†–ï–ñ–ò–ú:")
    print("=" * 50)
    
    try:
        suppliers = Supplier.objects.all()
        switched_count = 0
        
        for supplier in suppliers:
            if supplier.use_mock_admin_api:
                supplier.use_mock_admin_api = False
                supplier.save()
                switched_count += 1
                print(f"   ‚úÖ {supplier.name}: Mock —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω")
            else:
                print(f"   ‚úÖ {supplier.name}: Mock —Ä–µ–∂–∏–º —É–∂–µ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: Mock —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω —É {switched_count} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        
        # –ö–æ–ø–∏—Ä—É–µ–º production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if os.path.exists('.env.production'):
            import shutil
            shutil.copy('.env.production', '.env')
            print("   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.production")
        else:
            print("   ‚ö†Ô∏è  –§–∞–π–ª .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("   üìù –°–æ–∑–¥–∞–π—Ç–µ .env.production –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ prepare_for_production.py")
        
        print("   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("   ‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ credentials!")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ production: {e}")
    
    print()

def validate_production_readiness():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production"""
    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö PRODUCTION:")
    print("=" * 50)
    
    issues = []
    
    try:
        suppliers = Supplier.objects.all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º mock —Ä–µ–∂–∏–º—ã
        mock_enabled = suppliers.filter(use_mock_admin_api=True)
        if mock_enabled.exists():
            issues.append(f"ü§ñ Mock —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω —É {mock_enabled.count()} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        else:
            print("   ‚úÖ –í—Å–µ mock —Ä–µ–∂–∏–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials
        no_credentials = []
        for supplier in suppliers.filter(is_active=True):
            if not supplier.api_login or not supplier.api_password:
                no_credentials.append(supplier.name)
        
        if no_credentials:
            issues.append(f"üîê –ù–µ—Ç credentials —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {', '.join(no_credentials)}")
        else:
            print("   ‚úÖ –£ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –µ—Å—Ç—å credentials")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from django.conf import settings
        if settings.DEBUG:
            issues.append("üîß DEBUG=True (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False)")
        else:
            print("   ‚úÖ DEBUG=False")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env.production
        if not os.path.exists('.env.production'):
            issues.append("üìÑ –§–∞–π–ª .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("   ‚úÖ –§–∞–π–ª .env.production —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if issues:
            print(f"\nüî¥ –ù–ê–ô–î–ï–ù–û {len(issues)} –ü–†–û–ë–õ–ï–ú:")
            for issue in issues:
                print(f"   {issue}")
            print("\nüìù –ó–∞–ø—É—Å—Ç–∏—Ç–µ prepare_for_production.py –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            print("\nüéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö PRODUCTION!")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
    
    print()

def show_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –†–ï–ñ–ò–ú–û–í SHOPAPEX")
    print("=" * 50)
    print("1. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º")
    print("2. ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ Development (mock –¥–∞–Ω–Ω—ã–µ)")
    print("3. üöÄ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ Production (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")  
    print("4. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ Production")
    print("5. üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    print()

def show_suppliers_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    print("üìã –°–¢–ê–¢–£–° –ü–û–°–¢–ê–í–©–ò–ö–û–í:")
    print("=" * 50)
    
    try:
        suppliers = Supplier.objects.all().order_by('name')
        
        for supplier in suppliers:
            print(f"\nüì¶ {supplier.name}:")
            print(f"   üîó API URL: {supplier.api_url}")
            print(f"   ‚ö° –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if supplier.is_active else '–ù–µ—Ç'}")
            print(f"   ü§ñ Mock —Ä–µ–∂–∏–º: {'üî¥ –í–∫–ª—é—á–µ–Ω' if supplier.use_mock_admin_api else '‚úÖ –í—ã–∫–ª—é—á–µ–Ω'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials
            credentials_status = []
            if supplier.api_login:
                credentials_status.append("‚úÖ API Login")
            else:
                credentials_status.append("‚ùå API Login")
                
            if supplier.api_password:
                credentials_status.append("‚úÖ API Password")
            else:
                credentials_status.append("‚ùå API Password")
            
            # –î–ª—è ABCP API –ø—Ä–æ–≤–µ—Ä—è–µ–º admin credentials
            if 'abcp.ru' in supplier.api_url.lower():
                if supplier.admin_login:
                    credentials_status.append("‚úÖ Admin Login")
                else:
                    credentials_status.append("‚ùå Admin Login")
                    
                if supplier.admin_password:
                    credentials_status.append("‚úÖ Admin Password")
                else:
                    credentials_status.append("‚ùå Admin Password")
                    
                if supplier.office_id:
                    credentials_status.append("‚úÖ Office ID")
                else:
                    credentials_status.append("‚ö†Ô∏è Office ID")
            
            print(f"   üîê Credentials: {', '.join(credentials_status)}")
            
            # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production
            has_all_credentials = supplier.api_login and supplier.api_password
            if 'abcp.ru' in supplier.api_url.lower():
                has_all_credentials = has_all_credentials and supplier.admin_login and supplier.admin_password
            
            is_ready = has_all_credentials and not supplier.use_mock_admin_api and supplier.is_active
            readiness = "‚úÖ –ì–æ—Ç–æ–≤" if is_ready else "üî¥ –ù–µ –≥–æ—Ç–æ–≤"
            print(f"   üéØ Production: {readiness}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    while True:
        show_menu()
        
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): ").strip()
            
            if choice == '1':
                show_current_mode()
            elif choice == '2':
                switch_to_development()
            elif choice == '3':
                switch_to_production()
            elif choice == '4':
                validate_production_readiness()
            elif choice == '5':
                show_suppliers_status()
            elif choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}\n")

if __name__ == "__main__":
    main()
