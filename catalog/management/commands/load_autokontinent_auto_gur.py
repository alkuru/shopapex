import pandas as pd
import os
from django.core.management.base import BaseCommand
from catalog.models import AutoKontinentProduct

class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç 5 —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ Auto Gur –∏–∑ –ø—Ä–∞–π—Å–∞ AutoKontinent'

    def handle(self, *args, **options):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç 5 —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ Auto Gur –∏–∑ –ø—Ä–∞–π—Å–∞ AutoKontinent"""
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∞–π—Å–∞
        price_file = "/app/import/–°–ï–í_–°–ü–±-–°–ü–±-–ú–°–ö 05141_310725.xlsx"
        
        if not os.path.exists(price_file):
            self.stdout.write(
                self.style.ERROR(f'‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {price_file}')
            )
            return
        
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            self.stdout.write(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∞–π—Å: {price_file}")
            df = pd.read_excel(price_file)
            self.stdout.write(f"üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ø—Ä–∞–π—Å–µ: {len(df)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            self.stdout.write(f"üìù –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ: {list(df.columns)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥—É Auto Gur
            brand_filter = 'Auto Gur'
            filtered_df = df[df['–ë—Ä–µ–Ω–¥'].str.contains(brand_filter, case=False, na=False)]
            
            self.stdout.write(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ {brand_filter}: {len(filtered_df)}")
            
            if len(filtered_df) == 0:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ {brand_filter} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                unique_brands = df['–ë—Ä–µ–Ω–¥'].dropna().unique()
                self.stdout.write(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã: {sorted(unique_brands)}")
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
            test_products = filtered_df.head(5)
            
            created_count = 0
            updated_count = 0
            
            self.stdout.write(f"\nüöÄ –ó–∞–≥—Ä—É–∂–∞—é 5 —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ {brand_filter}:")
            self.stdout.write("=" * 80)
            
            for index, row in test_products.iterrows():
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    brand = str(row.get('–ë—Ä–µ–Ω–¥', '')).strip()
                    article = str(row.get('–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞', '')).strip()
                    name = str(row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '')).strip()
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
                    stock_spb_north = int(row.get('–ö–æ–ª-–≤–æ –°–ï–í_–°–ü–±', 0)) if pd.notna(row.get('–ö–æ–ª-–≤–æ –°–ï–í_–°–ü–±')) else 0
                    stock_spb = int(row.get('–ö–æ–ª-–≤–æ –°–ü–±', 0)) if pd.notna(row.get('–ö–æ–ª-–≤–æ –°–ü–±')) else 0
                    stock_msk = int(row.get('–ö–æ–ª-–≤–æ –ú–°–ö', 0)) if pd.notna(row.get('–ö–æ–ª-–≤–æ –ú–°–ö')) else 0
                    
                    # –¶–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    price = float(row.get('–¶–µ–Ω–∞', 0)) if pd.notna(row.get('–¶–µ–Ω–∞')) else 0
                    multiplicity = int(row.get('–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å', 1)) if pd.notna(row.get('–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å')) else 1
                    unit = str(row.get('–ï–¥. –∏–∑–º.', '—à—Ç')).strip()
                    
                    if brand and article and name:
                        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                        product, created = AutoKontinentProduct.objects.update_or_create(
                            brand=brand,
                            article=article,
                            defaults={
                                'name': name,
                                'stock_spb_north': stock_spb_north,
                                'stock_spb': stock_spb,
                                'stock_msk': stock_msk,
                                'price': price,
                                'multiplicity': multiplicity,
                                'unit': unit,
                            }
                        )
                        
                        if created:
                            created_count += 1
                            status = "‚úÖ –°–û–ó–î–ê–ù"
                        else:
                            updated_count += 1
                            status = "üîÑ –û–ë–ù–û–í–õ–ï–ù"
                        
                        self.stdout.write(f"{status} | {brand} | {article} | {name[:50]}...")
                        self.stdout.write(f"    –¶–µ–Ω–∞: {price} —Ä—É–± | –°–ü–±: {stock_spb} | –ú–°–ö: {stock_msk} | –°–ï–í_–°–ü–±: {stock_spb_north}")
                        
                    else:
                        self.stdout.write(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {index + 2}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                        
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {str(e)}')
                    )
                    continue
            
            self.stdout.write("=" * 80)
            self.stdout.write(
                self.style.SUCCESS(f'üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
            )
            self.stdout.write(f"üìä –°–æ–∑–¥–∞–Ω–æ: {created_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            total_auto_gur = AutoKontinentProduct.objects.filter(brand__icontains='Auto Gur').count()
            self.stdout.write(f"üìã –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ Auto Gur –≤ –±–∞–∑–µ: {total_auto_gur}")
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}')
            ) 