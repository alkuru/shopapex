#!/usr/bin/env python
"""
–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫ search/articles API –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
"""

import os
import django
import hashlib
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def test_articles_api_direct():
    """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫ search/articles API"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier = Supplier.objects.filter(api_type='autoparts').first()
        
        if not supplier:
            print("‚ùå ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier.name}")
        
        # –°–æ–∑–¥–∞–µ–º md5-—Ö—ç—à –ø–∞—Ä–æ–ª—è
        password_hash = hashlib.md5(supplier.api_password.encode('utf-8')).hexdigest()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        search_url = f"{supplier.api_url.rstrip('/')}/search/articles"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        test_cases = [
            {"article": "1234567890", "brand": "testBrandNewD"},
            {"article": "INVALID_ARTICLE", "brand": "INVALID_BRAND"},
            {"article": "1234567890", "brand": ""},  # –ü—É—Å—Ç–æ–π –±—Ä–µ–Ω–¥
        ]
        
        for i, test_case in enumerate(test_cases):
            print(f"\n--- –¢–µ—Å—Ç {i+1}: {test_case} ---")
            
            params = {
                'userlogin': supplier.api_login,
                'userpsw': password_hash,
                'number': test_case['article'].strip(),
                'brand': test_case['brand'].strip()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if supplier.office_id:
                params['officeId'] = supplier.office_id
            
            if supplier.use_online_stocks:
                params['useOnlineStocks'] = 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å–∞–º–æ–≤—ã–≤–æ–∑
            if supplier.default_shipment_address != '0':
                params['shipmentAddress'] = supplier.default_shipment_address
            
            print(f"üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫: {search_url}")
            print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            response = requests.get(search_url, params=params, timeout=15)
            
            print(f"Status Code: {response.status_code}")
            print(f"Headers: {response.headers}")
            print(f"Raw Response: {response.text[:300]}...")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"üìä JSON –¥–∞–Ω–Ω—ã–µ:")
                    print(f"–¢–∏–ø: {type(data)}")
                    
                    if isinstance(data, dict):
                        print(f"–ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è: {list(data.keys())}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                        if 'errorCode' in data:
                            error_code = data.get('errorCode')
                            error_message = data.get('errorMessage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                            print(f"‚ùå ABCP API –æ—à–∏–±–∫–∞ {error_code}: {error_message}")
                        else:
                            for key, value in data.items():
                                print(f"  {key}: {type(value)} = {str(value)[:100]}...")
                                
                    elif isinstance(data, list):
                        print(f"–°–ø–∏—Å–æ–∫ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        for j, item in enumerate(data[:2]):
                            print(f"  [{j}]: {type(item)} = {str(item)[:100]}...")
                    else:
                        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(data)}")
                        print(f"–ó–Ω–∞—á–µ–Ω–∏–µ: {data}")
                        
                except json.JSONDecodeError as e:
                    print(f"‚ùå JSON decode error: {e}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_articles_api_direct()
