#!/usr/bin/env python
import os
import pandas as pd
import glob

def main():
    print("=== –ü–û–ò–°–ö –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–• –§–ê–ô–õ–û–í MIKADO ===")
    
    # –ò—â–µ–º Excel —Ñ–∞–π–ª—ã Mikado
    possible_paths = [
        "*.xlsx",
        "*.xls", 
        "Mikado*.xlsx",
        "mikado*.xlsx",
        "MIKADO*.xlsx",
        "**/*.xlsx",
        "**/*mikado*.xlsx"
    ]
    
    mikado_files = []
    for pattern in possible_paths:
        files = glob.glob(pattern, recursive=True)
        mikado_files.extend([f for f in files if 'mikado' in f.lower()])
    
    if not mikado_files:
        print("‚ùå –§–∞–π–ª—ã Mikado –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ Excel —Ñ–∞–π–ª—ã:")
        all_excel = glob.glob("**/*.xlsx", recursive=True)
        for f in all_excel[:10]:
            print(f"  {f}")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ Mikado: {len(mikado_files)}")
    for f in mikado_files:
        print(f"  {f}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    test_file = mikado_files[0]
    print(f"\n=== –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê: {test_file} ===")
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(test_file)
        print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ: {list(df.columns)}")
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –±—Ä–µ–Ω–¥–∞–º–∏
        brand_columns = [col for col in df.columns if any(word in col.lower() for word in ['brand', '–±—Ä–µ–Ω–¥', '–º–∞—Ä–∫–∞', 'manufacturer'])]
        
        if brand_columns:
            brand_col = brand_columns[0]
            print(f"–ö–æ–ª–æ–Ω–∫–∞ —Å –±—Ä–µ–Ω–¥–∞–º–∏: {brand_col}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
            problem_articles = ["610.3718.20", "610.3719.20", "610.3715.20"]
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
            article_columns = [col for col in df.columns if any(word in col.lower() for word in ['article', '–∞—Ä—Ç–∏–∫—É–ª', '–∫–æ–¥', 'part'])]
            
            if article_columns:
                article_col = article_columns[0]
                print(f"–ö–æ–ª–æ–Ω–∫–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏: {article_col}")
                
                for article in problem_articles:
                    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Ñ–∞–π–ª–µ
                    mask = df[article_col].astype(str).str.contains(article, case=False, na=False)
                    found_products = df[mask]
                    
                    if not found_products.empty:
                        product = found_products.iloc[0]
                        original_brand = product[brand_col]
                        print(f"\nüìã –ê—Ä—Ç–∏–∫—É–ª: {article}")
                        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥: {original_brand}")
                        if 'name' in df.columns:
                            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {product.get('name', 'N/A')}")
                        elif '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in df.columns.str.lower():
                            name_col = [col for col in df.columns if '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in col.lower()][0]
                            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {product.get(name_col, 'N/A')}")
                        else:
                            desc_cols = [col for col in df.columns if any(word in col.lower() for word in ['name', 'description', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ'])]
                            if desc_cols:
                                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {product.get(desc_cols[0], 'N/A')}")
                    else:
                        print(f"\n‚ùå –ê—Ä—Ç–∏–∫—É–ª {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
            unique_brands = df[brand_col].dropna().unique()[:20]
            print(f"\n–ü–µ—Ä–≤—ã–µ 20 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –≤ —Ñ–∞–π–ª–µ:")
            for i, brand in enumerate(unique_brands, 1):
                print(f"  {i:2d}. {brand}")
                
        else:
            print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ —Å –±—Ä–µ–Ω–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

if __name__ == '__main__':
    main() 