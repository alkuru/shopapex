#!/usr/bin/env python
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ ABCP API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex.settings')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
django.setup()

from catalog.models import Supplier

def test_abcp_api_compliance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ABCP API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üîç –¢–ï–°–¢ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø ABCP API")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    try:
        supplier = Supplier.objects.filter(is_active=True, api_type='autoparts').first()
        if not supplier:
            print("‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ API –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.name}")
        print(f"   URL: {supplier.api_url}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    print("\nüîç –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")
    test_article = "01089"  # –¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    
    try:
        success, result = supplier.get_abcp_brands(number=test_article)
        if success:
            print(f"‚úÖ get_abcp_brands —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(result) if isinstance(result, list) else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –±—Ä–µ–Ω–¥–æ–≤")
            if isinstance(result, list) and result:
                print(f"   –ü–µ—Ä–≤—ã–π –±—Ä–µ–Ω–¥: {result[0].get('brand', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            elif isinstance(result, dict):
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {list(result.keys())[:3]}")
        else:
            print(f"‚ö†Ô∏è get_abcp_brands –æ—à–∏–±–∫–∞: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ get_abcp_brands: {e}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –±—Ä–µ–Ω–¥—É
    print("\nüîç –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –±—Ä–µ–Ω–¥—É")
    test_brand = "Febi"  # –¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    
    try:
        success, result = supplier.search_products_by_article(test_article, test_brand)
        if success:
            print(f"‚úÖ search_products_by_article —Ä–∞–±–æ—Ç–∞–µ—Ç")
            if isinstance(result, list):
                print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(result)}")
                if result:
                    product = result[0]
                    print(f"   –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {product.get('brand', '')} {product.get('articleCode', '')} - {product.get('description', '')[:50]}...")
                    print(f"   –¶–µ–Ω–∞: {product.get('price', 0)} | –ù–∞–ª–∏—á–∏–µ: {product.get('availability', 0)}")
            else:
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {type(result)}")
        else:
            print(f"‚ö†Ô∏è search_products_by_article –æ—à–∏–±–∫–∞: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ search_products_by_article: {e}")
    
    # –¢–µ—Å—Ç 3: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤
    print("\nüîç –¢–ï–°–¢ 3: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤")
    
    try:
        success, result = supplier.get_product_analogs(test_article, limit=5)
        if success:
            print(f"‚úÖ get_product_analogs —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            if isinstance(result, list):
                print(f"   –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {len(result)}")
                for i, analog in enumerate(result[:3]):
                    print(f"   –ê–Ω–∞–ª–æ–≥ {i+1}: {analog.get('brand', '')} {analog.get('article', '')} - {analog.get('name', '')[:40]}...")
                    print(f"              –¶–µ–Ω–∞: {analog.get('price', 0)} | –ù–∞–ª–∏—á–∏–µ: {analog.get('availability', 0)}")
            else:
                print(f"   –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
        else:
            print(f"‚ö†Ô∏è get_product_analogs –æ—à–∏–±–∫–∞: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ get_product_analogs: {e}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    print("\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –≤ –º–æ–¥–µ–ª–∏
    critical_fields = ['api_url', 'api_login', 'api_password', 'use_online_stocks', 'office_id']
    missing_fields = []
    
    for field in critical_fields:
        if hasattr(supplier, field):
            value = getattr(supplier, field)
            print(f"   ‚úÖ {field}: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ' if value else '–ø—É—Å—Ç–æ'}")
        else:
            missing_fields.append(field)
            print(f"   ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
    
    if missing_fields:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}")
    else:
        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    
    return True

if __name__ == '__main__':
    test_abcp_api_compliance()
