#!/usr/bin/env python
"""
–£–ª—å—Ç—Ä–∞-–¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–µ—Ç–æ–¥–∞ get_product_analogs –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –æ—à–∏–±–∫–∏
"""

import os
import django
import traceback
import hashlib
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def debug_api_call():
    """–î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫ ABCP API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier = Supplier.objects.filter(api_type='autoparts').first()
        
        if not supplier:
            print("‚ùå ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier.name}")
        
        # –°–æ–∑–¥–∞–µ–º md5-—Ö—ç—à –ø–∞—Ä–æ–ª—è
        password_hash = hashlib.md5(supplier.api_password.encode('utf-8')).hexdigest()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ brands API —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
        test_article = "1234567890"
        brands_url = f"{supplier.api_url.rstrip('/')}/search/brands"
        
        params = {
            'userlogin': supplier.api_login,
            'userpsw': password_hash,
            'number': test_article.strip(),
            'useOnlineStocks': 1 if supplier.use_online_stocks else 0
        }
        
        print(f"\nüîç –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫: {brands_url}")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        response = requests.get(brands_url, params=params, timeout=15)
        
        print(f"\nüì° –û—Ç–≤–µ—Ç –æ—Ç API:")
        print(f"Status Code: {response.status_code}")
        print(f"Headers: {response.headers}")
        print(f"Raw Response: {response.text[:500]}...")
        
        if response.status_code == 200:
            try:
                brands_data = response.json()
                print(f"\nüìä –†–∞–∑–±–æ—Ä JSON –æ—Ç–≤–µ—Ç–∞:")
                print(f"–¢–∏–ø: {type(brands_data)}")
                
                if isinstance(brands_data, dict):
                    print(f"–ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è: {list(brands_data.keys())}")
                    for key, value in brands_data.items():
                        print(f"  {key}: {type(value)} = {str(value)[:100]}...")
                        
                elif isinstance(brands_data, list):
                    print(f"–î–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞: {len(brands_data)}")
                    for i, item in enumerate(brands_data[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"  [{i}]: {type(item)} = {str(item)[:100]}...")
                        if isinstance(item, dict):
                            print(f"    –ö–ª—é—á–∏: {list(item.keys())}")
                else:
                    print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(brands_data)}")
                
                # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥
                print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
                if not isinstance(brands_data, (list, dict)):
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ: {type(brands_data)}")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ (–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å)
                if isinstance(brands_data, dict) and 'errorCode' in brands_data:
                    error_code = brands_data.get('errorCode')
                    error_message = brands_data.get('errorMessage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    print(f"‚ùå ABCP API –æ—à–∏–±–∫–∞ {error_code}: {error_message}")
                    return
                
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π
                if isinstance(brands_data, dict):
                    print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dict –∫ —Å–ø–∏—Å–∫—É...")
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - —Å–ª–æ–≤–∞—Ä—å, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –µ–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
                    if 'brands' in brands_data:
                        brands_list = brands_data['brands']
                        print(f"  –ù–∞–π–¥–µ–Ω –∫–ª—é—á 'brands': {type(brands_list)}")
                    elif 'data' in brands_data:
                        brands_list = brands_data['data']
                        print(f"  –ù–∞–π–¥–µ–Ω –∫–ª—é—á 'data': {type(brands_list)}")
                    else:
                        # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è –±—Ä–µ–Ω–¥–∞, —Ç–æ —ç—Ç–æ –µ–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
                        if 'brand' in brands_data or 'number' in brands_data:
                            brands_list = [brands_data]
                            print(f"  –°–æ–∑–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: {type(brands_list)}")
                        else:
                            brands_list = []
                            print(f"  –°–æ–∑–¥–∞–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                else:
                    brands_list = brands_data
                    print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫: {type(brands_list)}")
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å —Å–ø–∏—Å–æ–∫
                if not isinstance(brands_list, list):
                    print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω {type(brands_list)}")
                    return
                
                print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ {len(brands_list)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ dict
                print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞:")
                valid_brands = []
                for i, item in enumerate(brands_list):
                    print(f"  [{i}]: {type(item)}")
                    if isinstance(item, dict):
                        valid_brands.append(item)
                        print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞–ª–∏–¥–Ω—ã–º")
                    else:
                        print(f"    ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ dict)")
                
                print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(valid_brands)}")
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –ø–æ –≤–∞–ª–∏–¥–Ω—ã–º –±—Ä–µ–Ω–¥–∞–º
                print("\nüîÑ –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –≤–∞–ª–∏–¥–Ω—ã–º –±—Ä–µ–Ω–¥–∞–º:")
                for i, brand_info in enumerate(valid_brands[:2]):  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                    print(f"  –ë—Ä–µ–Ω–¥ {i}:")
                    print(f"    –¢–∏–ø: {type(brand_info)}")
                    if isinstance(brand_info, dict):
                        print(f"    –ö–ª—é—á–∏: {list(brand_info.keys())}")
                        brand_name = brand_info.get('brand', '')
                        article_code = brand_info.get('number', test_article)
                        print(f"    brand: {brand_name}")
                        print(f"    number: {article_code}")
                    else:
                        print(f"    ‚ùå –ù–ï –°–õ–û–í–ê–†–¨! –≠—Ç–æ {type(brand_info)}")
                        
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON decode error: {e}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    debug_api_call()
