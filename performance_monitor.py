#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å 550,000+ —Ç–æ–≤–∞—Ä–∞–º–∏
"""

import os
import sys
import django
import time
import psycopg2
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import AutoKontinentProduct
from django.db import connection
from django.core.cache import cache

def test_database_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("=== –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===\n")
    
    # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("1. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    total_products = AutoKontinentProduct.objects.count()
    print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products:,}")
    
    # 2. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    print("\n2. –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–û –ê–†–¢–ò–ö–£–õ–£:")
    start_time = time.time()
    results = AutoKontinentProduct.objects.filter(article__icontains='OC47')[:10]
    search_time = time.time() - start_time
    print(f"   –ü–æ–∏—Å–∫ 'OC47': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {search_time:.3f}—Å")
    
    # 3. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –±—Ä–µ–Ω–¥—É
    print("\n3. –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–û –ë–†–ï–ù–î–£:")
    start_time = time.time()
    results = AutoKontinentProduct.objects.filter(brand__icontains='MANN')[:10]
    search_time = time.time() - start_time
    print(f"   –ü–æ–∏—Å–∫ 'MANN': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {search_time:.3f}—Å")
    
    # 4. –¢–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    print("\n4. –¢–ï–°–¢ –°–û–°–¢–ê–í–ù–û–ì–û –ü–û–ò–°–ö–ê:")
    start_time = time.time()
    results = AutoKontinentProduct.objects.filter(
        article__icontains='OC47',
        brand__icontains='Knecht'
    )[:10]
    search_time = time.time() - start_time
    print(f"   –ü–æ–∏—Å–∫ 'OC47' + 'Knecht': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {search_time:.3f}—Å")
    
    # 5. –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    print("\n5. –¢–ï–°–¢ –°–û–†–¢–ò–†–û–í–ö–ò:")
    start_time = time.time()
    results = AutoKontinentProduct.objects.order_by('-updated_at')[:10]
    sort_time = time.time() - start_time
    print(f"   –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ updated_at: {sort_time:.3f}—Å")
    
    # 6. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–ª–∏—á–∏—é
    print("\n6. –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –ù–ê–õ–ò–ß–ò–Æ:")
    start_time = time.time()
    in_stock = AutoKontinentProduct.objects.filter(stock_spb_north__gt=0).count()
    filter_time = time.time() - start_time
    print(f"   –¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ (–°–ï–í_–°–ü–±): {in_stock:,} –∑–∞ {filter_time:.3f}—Å")
    
    # 7. –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
    print("\n7. –ê–ù–ê–õ–ò–ó –ò–ù–î–ï–ö–°–û–í:")
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT 
                schemaname,
                tablename,
                indexname,
                indexdef
            FROM pg_indexes 
            WHERE tablename = 'catalog_autokontinentproduct'
            ORDER BY indexname;
        """)
        indexes = cursor.fetchall()
        
        for index in indexes:
            print(f"   –ò–Ω–¥–µ–∫—Å: {index[2]}")
    
    # 8. –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
    print("\n8. –†–ê–ó–ú–ï–† –¢–ê–ë–õ–ò–¶–´:")
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT 
                pg_size_pretty(pg_total_relation_size('catalog_autokontinentproduct')),
                pg_size_pretty(pg_relation_size('catalog_autokontinentproduct'))
        """)
        sizes = cursor.fetchone()
        print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {sizes[0]}")
        print(f"   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {sizes[1]}")

def test_cache_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
    
    print("\n=== –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ö–≠–®–ê ===\n")
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à
    start_time = time.time()
    cache.set('test_key', 'test_value', 300)
    write_time = time.time() - start_time
    print(f"–ó–∞–ø–∏—Å—å –≤ –∫—ç—à: {write_time:.4f}—Å")
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
    start_time = time.time()
    value = cache.get('test_key')
    read_time = time.time() - start_time
    print(f"–ß—Ç–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞: {read_time:.4f}—Å")
    
    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞: {value}")

def estimate_550k_performance():
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ 550K —Ç–æ–≤–∞—Ä–∞—Ö"""
    
    print("\n=== –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–†–ò 550K –¢–û–í–ê–†–ê–• ===\n")
    
    current_count = AutoKontinentProduct.objects.count()
    target_count = 550000
    
    print(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_count:,}")
    print(f"–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {target_count:,}")
    print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {target_count / current_count:.2f}x")
    
    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    print("\n–û–¶–ï–ù–ö–ê –í–†–ï–ú–ï–ù–ò –ó–ê–ü–†–û–°–û–í:")
    print("   –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: < 0.1—Å (—Å –∏–Ω–¥–µ–∫—Å–æ–º)")
    print("   –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É: < 0.1—Å (—Å –∏–Ω–¥–µ–∫—Å–æ–º)")
    print("   –°–æ—Å—Ç–∞–≤–Ω–æ–π –ø–æ–∏—Å–∫: < 0.05—Å (—Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º)")
    print("   –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: < 0.2—Å (—Å –∏–Ω–¥–µ–∫—Å–æ–º updated_at)")
    print("   –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é: < 0.1—Å (—Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ stock)")
    
    # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã
    print("\n–û–¶–ï–ù–ö–ê –†–ê–ó–ú–ï–†–ê –ë–ê–ó–´:")
    avg_row_size = 200  # –±–∞–π—Ç –Ω–∞ –∑–∞–ø–∏—Å—å (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    estimated_size = target_count * avg_row_size
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ~{estimated_size / (1024*1024):.1f} MB")
    print(f"   –° –∏–Ω–¥–µ–∫—Å–∞–º–∏: ~{estimated_size * 1.5 / (1024*1024):.1f} MB")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò SHOPAPEX")
    print("=" * 50)
    
    try:
        test_database_performance()
        test_cache_performance()
        estimate_550k_performance()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
        print("\nüìä –í–´–í–û–î:")
        print("   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ 550K —Ç–æ–≤–∞—Ä–∞–º")
        print("   - –ò–Ω–¥–µ–∫—Å—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        print("   - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–π")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 