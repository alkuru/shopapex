#!/usr/bin/env python
"""
–°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é get_product_analogs –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –æ—Ç–ª–∞–¥–∫–∏
"""

import os
import django
import hashlib
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def debug_get_product_analogs(supplier, article, brand=None, limit=20):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è get_product_analogs"""
    print(f"üéØ DEBUG: get_product_analogs('{article}', '{brand}', {limit})")
    
    if supplier.api_type != 'autoparts' or not supplier.api_url:
        return False, "API –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    if not supplier.api_login or not supplier.api_password:
        return False, "–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    try:
        # –°–æ–∑–¥–∞–µ–º md5-—Ö—ç—à –ø–∞—Ä–æ–ª—è
        password_hash = hashlib.md5(supplier.api_password.encode('utf-8')).hexdigest()
        print(f"‚úÖ –ü–∞—Ä–æ–ª—å —Ö—ç—à–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (—ç—Ç–æ –∏ –µ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏)
        brands_url = f"{supplier.api_url.rstrip('/')}/search/brands"
        
        params = {
            'userlogin': supplier.api_login,
            'userpsw': password_hash,
            'number': article.strip(),
            'useOnlineStocks': 1 if supplier.use_online_stocks else 0
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º office_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if supplier.office_id:
            params['officeId'] = supplier.office_id
        
        print(f"üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ {brands_url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        response = requests.get(brands_url, params=params, timeout=15)
        print(f"üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}")
        
        if response.status_code == 200:
            try:
                brands_data = response.json()
                print(f"üìä JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {type(brands_data)}")
                print(f"üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {brands_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
                if not isinstance(brands_data, (list, dict)):
                    error_msg = f"ABCP API: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ: {type(brands_data)}"
                    print(f"‚ùå {error_msg}")
                    return False, error_msg
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ (–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å)
                if isinstance(brands_data, dict) and 'errorCode' in brands_data:
                    error_code = brands_data.get('errorCode')
                    error_message = brands_data.get('errorMessage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    error_msg = f"ABCP API –æ—à–∏–±–∫–∞ {error_code}: {error_message}"
                    print(f"‚ùå {error_msg}")
                    return False, error_msg
                
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
                
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π
                if isinstance(brands_data, dict):
                    print(f"üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dict –≤ —Å–ø–∏—Å–æ–∫...")
                    brands_list = []
                    for key, value in brands_data.items():
                        print(f"  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á: {key} -> {type(value)}")
                        if isinstance(value, dict) and ('brand' in value or 'number' in value):
                            brands_list.append(value)
                            print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω")
                        else:
                            print(f"    ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω")
                    brands_data = brands_list
                    print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å —Å–ø–∏—Å–æ–∫
                if not isinstance(brands_data, list):
                    error_msg = f"ABCP API: –æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω {type(brands_data)}"
                    print(f"‚ùå {error_msg}")
                    return False, error_msg
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ dict
                original_count = len(brands_data)
                brands_data = [item for item in brands_data if isinstance(item, dict)]
                print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ dict –æ–±—ä–µ–∫—Ç—ã: {original_count} -> {len(brands_data)}")
                
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—Ä–µ–Ω–¥, —Ñ–∏–ª—å—Ç—Ä—É–µ–º
                if brand:
                    print(f"üîé –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥—É: {brand}")
                    filtered_data = []
                    for b in brands_data:
                        if isinstance(b, dict):
                            brand_name = b.get('brand', '')
                            print(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–µ–Ω–¥: {brand_name}")
                            if brand_name.lower() == brand.lower():
                                filtered_data.append(b)
                                print(f"    ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ")
                            else:
                                print(f"    ‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                        else:
                            print(f"  ‚ùå –ù–µ dict: {type(b)}")
                    brands_data = filtered_data
                    print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if limit and len(brands_data) > limit:
                    brands_data = brands_data[:limit]
                    print(f"‚úÇÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ {limit} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                analogs = []
                print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(brands_data)} –±—Ä–µ–Ω–¥–æ–≤...")
                
                for i, brand_info in enumerate(brands_data):
                    print(f"\n--- –ë—Ä–µ–Ω–¥ {i+1} ---")
                    print(f"–¢–∏–ø brand_info: {type(brand_info)}")
                    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ brand_info: {brand_info}")
                    
                    # –ó–î–ï–°–¨ –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–†–û–ë–õ–ï–ú–ê!
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–≤–∞—Ä—å
                    if not isinstance(brand_info, dict):
                        print(f"‚ùå brand_info –Ω–µ dict, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    print(f"‚úÖ brand_info is dict")
                    
                    try:
                        brand_name = brand_info.get('brand', '')
                        print(f"‚úÖ brand_name extracted: {brand_name}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ brand_name: {e}")
                        print(f"brand_info —Ç–∏–ø: {type(brand_info)}")
                        print(f"brand_info –∑–Ω–∞—á–µ–Ω–∏–µ: {brand_info}")
                        continue
                    
                    try:
                        article_code = brand_info.get('number', article)
                        print(f"‚úÖ article_code extracted: {article_code}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ article_code: {e}")
                        continue
                    
                    print(f"üéØ –ë—Ä–µ–Ω–¥: {brand_name}, –ê—Ä—Ç–∏–∫—É–ª: {article_code}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
                    print(f"üì° –í—ã–∑—ã–≤–∞–µ–º _search_articles_by_brand...")
                    try:
                        success, articles_data = supplier._search_articles_by_brand(article_code, brand_name)
                        print(f"‚úÖ _search_articles_by_brand –≤–µ—Ä–Ω—É–ª: success={success}, type={type(articles_data)}")
                        
                        if success and articles_data:
                            print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º articles_data...")
                            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ articles_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
                            if isinstance(articles_data, dict):
                                if 'articles' in articles_data:
                                    products_list = articles_data['articles']
                                    print(f"–ù–∞–π–¥–µ–Ω –∫–ª—é—á 'articles': {type(products_list)}")
                                elif 'data' in articles_data:
                                    products_list = articles_data['data']
                                    print(f"–ù–∞–π–¥–µ–Ω –∫–ª—é—á 'data': {type(products_list)}")
                                else:
                                    products_list = [articles_data]  # –ï–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
                                    print(f"–°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞")
                            else:
                                products_list = articles_data
                                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–ø–∏—Å–æ–∫")
                            
                            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                            if not isinstance(products_list, list):
                                print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω {type(products_list)}")
                                continue
                                
                            print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(products_list)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                            
                            for j, product in enumerate(products_list):
                                print(f"  –ü—Ä–æ–¥—É–∫—Ç {j+1}: {type(product)}")
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                                if not isinstance(product, dict):
                                    print(f"    ‚ùå –ù–µ dict, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                    continue
                                    
                                print(f"    ‚úÖ –ü—Ä–æ–¥—É–∫—Ç —è–≤–ª—è–µ—Ç—Å—è dict")
                                
                                # –ó–î–ï–°–¨ –¢–û–ñ–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–†–û–ë–õ–ï–ú–ê!
                                try:
                                    analog = {
                                        'article': product.get('articleCode', article_code),
                                        'article_fix': product.get('articleCodeFix', article_code),
                                        'brand': product.get('brand', brand_name),
                                        'name': product.get('description', ''),
                                        'price': product.get('price', 0),
                                        'availability': product.get('availability', 0),
                                        'delivery_period': product.get('deliveryPeriod', 0),
                                        'weight': product.get('weight', '0'),
                                        'article_id': product.get('articleId', ''),
                                        'is_original': brand_name.lower() == brand.lower() if brand else False
                                    }
                                    analogs.append(analog)
                                    print(f"    ‚úÖ –ê–Ω–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω: {analog['article']} {analog['brand']}")
                                    
                                except Exception as e:
                                    print(f"    ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–æ–≥–∞: {e}")
                                    print(f"    –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {type(product)}")
                                    print(f"    –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
                                    raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
                        else:
                            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç _search_articles_by_brand: {articles_data}")
                            
                    except Exception as e:
                        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–µ–Ω–¥–∞: {e}")
                        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
                
                print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {len(analogs)}")
                
                return True, {
                    'original_article': article,
                    'original_brand': brand or '',
                    'total_found': len(analogs),
                    'analogs': analogs
                }
                
            except json.JSONDecodeError:
                error_msg = "ABCP API: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞"
                print(f"‚ùå {error_msg}")
                return False, error_msg
        elif response.status_code == 403:
            error_msg = f"ABCP API: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (403). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å."
            print(f"‚ùå {error_msg}")
            return False, error_msg
        else:
            error_msg = f"ABCP API: –æ—à–∏–±–∫–∞ HTTP {response.status_code}"
            print(f"‚ùå {error_msg}")
            return False, error_msg
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤: {str(e)}"
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_msg}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return False, error_msg

def test_debug_version():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –≤–µ—Ä—Å–∏—é"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier = Supplier.objects.filter(api_type='autoparts').first()
        
        if not supplier:
            print("‚ùå ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier.name}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π
        success, result = debug_get_product_analogs(
            supplier,
            article="1234567890",
            brand=None,
            limit=5
        )
        
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"Success: {success}")
        print(f"Result: {result}")
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_debug_version()
