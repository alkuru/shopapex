#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ABCP API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫, –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
"""

import os
import sys
import django
import time
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from django.test import Client
from django.urls import reverse
from catalog.models import (
    Supplier, Product, ProductCategory, Brand, 
    APIMonitorLog, APIHealthCheck
)
from catalog.forms import AdvancedSearchForm


def test_api_monitoring():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    supplier = Supplier.objects.filter(api_type='autoparts').first()
    if not supplier:
        print("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å API –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier.name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –¥–æ
    logs_before = APIMonitorLog.objects.count()
    
    # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π API –∑–∞–ø—Ä–æ—Å (–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥)
    success, result = supplier.get_abcp_user_info()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–∞
    logs_after = APIMonitorLog.objects.count()
    
    if logs_after > logs_before:
        print("   ‚úÖ –õ–æ–≥ API –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
        last_log = APIMonitorLog.objects.latest('created_at')
        print(f"   üìä –ú–µ—Ç–æ–¥: {last_log.method}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {last_log.status}")
        print(f"   üìä –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {last_log.response_time:.3f}—Å")
        
        return True
    else:
        print("   ‚ùå –õ–æ–≥ API –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return False


def test_api_health_check():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API...")
    
    supplier = Supplier.objects.filter(api_type='autoparts').first()
    if not supplier:
        print("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å API –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º health check
    health_check, created = APIHealthCheck.objects.get_or_create(
        supplier=supplier,
        defaults={
            'is_healthy': True,
            'success_rate_24h': 95.5,
            'avg_response_time': 1.2,
            'total_requests_today': 150
        }
    )
    
    print(f"   –°—Ç–∞—Ç—É—Å: {'üü¢ –°–æ–∑–¥–∞–Ω' if created else 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   –ó–¥–æ—Ä–æ–≤—å–µ: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if health_check.is_healthy else 'üî¥ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {health_check.success_rate_24h}%")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health_check.avg_response_time}—Å")
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {health_check.total_requests_today}")
    
    return True


def test_advanced_search_form():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã
    form_data = {
        'query': 'TEST123',
        'search_type': 'article',
        'price_min': '100.00',
        'price_max': '500.00',
        'in_stock_only': True,
        'use_supplier_api': True
    }
    
    form = AdvancedSearchForm(data=form_data)
    
    if form.is_valid():
        print("   ‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞")
        print(f"   üìù –ó–∞–ø—Ä–æ—Å: {form.cleaned_data['query']}")
        print(f"   üìù –¢–∏–ø –ø–æ–∏—Å–∫–∞: {form.cleaned_data['search_type']}")
        print(f"   üí∞ –¶–µ–Ω–∞ –æ—Ç: {form.cleaned_data['price_min']}")
        print(f"   üí∞ –¶–µ–Ω–∞ –¥–æ: {form.cleaned_data['price_max']}")
        print(f"   üì¶ –¢–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏: {form.cleaned_data['in_stock_only']}")
        print(f"   üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API: {form.cleaned_data['use_supplier_api']}")
        return True
    else:
        print("   ‚ùå –§–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞")
        print(f"   ‚ùå –û—à–∏–±–∫–∏: {form.errors}")
        return False


def test_advanced_search_view():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    
    client = Client()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    try:
        response = client.get('/catalog/advanced-search/')
        
        if response.status_code == 200:
            print("   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            print(f"   üìÑ –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if 'form' in response.context and response.context['form'] is not None:
                print("   ‚úÖ –§–æ—Ä–º–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
            else:
                print("   ‚ùå –§–æ—Ä–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
                return False
                
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
        return False


def test_quick_search_ajax():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AJAX –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AJAX –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    
    client = Client()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º AJAX –∑–∞–ø—Ä–æ—Å
        response = client.get('/catalog/quick-search/', {'q': 'test'})
        
        if response.status_code == 200:
            print("   ‚úÖ AJAX –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –æ—Ç–≤–µ—Ç
            try:
                data = response.json()
                if 'results' in data:
                    print("   ‚úÖ JSON –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(data['results'])}")
                    return True
                else:
                    print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –æ—Ç–≤–µ—Ç–∞")
                    return False
            except:
                print("   ‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AJAX: {e}")
        return False


def test_supplier_api_search_ajax():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AJAX –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AJAX –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")
    
    client = Client()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º AJAX –∑–∞–ø—Ä–æ—Å –∫ API –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        response = client.get('/catalog/supplier-api-search/', {'q': 'TEST123'})
        
        if response.status_code == 200:
            print("   ‚úÖ AJAX –∑–∞–ø—Ä–æ—Å –∫ API –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –æ—Ç–≤–µ—Ç
            try:
                data = response.json()
                if 'results' in data:
                    print("   ‚úÖ JSON –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                    print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {len(data['results'])}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
                    for result in data['results']:
                        status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
                        print(f"   {status_icon} {result['supplier']}: {len(result['products'])} —Ç–æ–≤–∞—Ä–æ–≤")
                    
                    return True
                else:
                    print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –æ—Ç–≤–µ—Ç–∞")
                    return False
            except:
                print("   ‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–æ–∏—Å–∫–∞: {e}")
        return False


def test_database_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å APIMonitorLog
        log_count = APIMonitorLog.objects.count()
        print(f"   üìä –õ–æ–≥–æ–≤ –≤ –±–∞–∑–µ: {log_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å APIHealthCheck
        health_count = APIHealthCheck.objects.count()
        print(f"   üè• –ó–∞–ø–∏—Å–µ–π –∑–¥–æ—Ä–æ–≤—å—è –≤ –±–∞–∑–µ: {health_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        suppliers_with_admin = Supplier.objects.filter(admin_login__isnull=False).exclude(admin_login='')
        print(f"   üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å admin –¥–æ—Å—Ç—É–ø–æ–º: {suppliers_with_admin.count()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        suppliers = Supplier.objects.filter(api_type='autoparts')
        for supplier in suppliers[:3]:
            print(f"   üè¢ {supplier.name}:")
            print(f"      - –û—Ñ–∏—Å: {supplier.office_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"      - –û–Ω–ª–∞–π–Ω —Å–∫–ª–∞–¥—ã: {'–î–∞' if supplier.use_online_stocks else '–ù–µ—Ç'}")
            print(f"      - Mock —Ä–µ–∂–∏–º: {'–î–∞' if supplier.use_mock_admin_api else '–ù–µ—Ç'}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –£–õ–£–ß–®–ï–ù–ò–ô –ü–†–û–ï–ö–¢–ê")
    print("=" * 60)
    
    results = []
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("API –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", test_api_monitoring),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API", test_api_health_check),
        ("–§–æ—Ä–º–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞", test_advanced_search_form),
        ("–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞", test_advanced_search_view),
        ("AJAX –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", test_quick_search_ajax),
        ("AJAX –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API", test_supplier_api_search_ajax),
        ("–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_database_models),
    ]
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
        if success:
            passed += 1
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ù–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
