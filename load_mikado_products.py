#!/usr/bin/env python
import os
import sys
import django
import pandas as pd
import re
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import MikadosProduct

def load_blocked_products():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    blocked_file = '/app/blocked_mikado_products.json'
    if os.path.exists(blocked_file):
        try:
            with open(blocked_file, 'r', encoding='utf-8') as f:
                return set(json.load(f))
        except:
            return set()
    return set()

def save_blocked_products(blocked_products):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
    blocked_file = '/app/blocked_mikado_products.json'
    try:
        with open(blocked_file, 'w', encoding='utf-8') as f:
            json.dump(list(blocked_products), f, ensure_ascii=False, indent=2)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(blocked_products)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")

def parse_quantity(quantity_value):
    """
    –ü–∞—Ä—Å–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    """
    if pd.isna(quantity_value):
        return 0
    
    quantity_str = str(quantity_value).strip()
    
    # –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    if not quantity_str:
        return 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if '>' in quantity_str:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ '>'
        match = re.search(r'>(\d+)', quantity_str)
        if match:
            return int(match.group(1))
        else:
            return 1  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å 1
    
    if '<' in quantity_str:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ '<'
        match = re.search(r'<(\d+)', quantity_str)
        if match:
            return int(match.group(1))
        else:
            return 0
    
    if '=' in quantity_str:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ '='
        match = re.search(r'=(\d+)', quantity_str)
        if match:
            return int(match.group(1))
        else:
            return 0
    
    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ª—é–±–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    numbers = re.findall(r'\d+', quantity_str)
    if numbers:
        return int(numbers[0])
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    return 0

def load_mikado_products(brand_name, count=5):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏–∑ –ø—Ä–∞–π—Å–∞ –º–∏–∫–∞–¥–æ
    
    Args:
        brand_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    """
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    blocked_products = load_blocked_products()
    print(f"üö´ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(blocked_products)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∞–π—Å–∞
    excel_file = '/app/import/mikado_price_1.xlsx'
    
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_file)
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Å {len(df)} —Å—Ç—Ä–æ–∫–∞–º–∏")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
        brand_products = df[df['BrandName'].str.contains(brand_name, case=False, na=False)]
        
        if brand_products.empty:
            print(f"‚ùå –¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ {brand_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–∞–π—Å–µ")
            return
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(brand_products)} —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ {brand_name}")
        
        # –ë–µ—Ä–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        selected_products = brand_products.head(count)
        
        created_count = 0
        skipped_blocked = 0
        
        for index, row in selected_products.iterrows():
            try:
                brand = str(row.get('BrandName', '')).strip()
                article = str(row.get('Code', '')).strip()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Code –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞
                name = str(row.get('Prodname', '')).strip()
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                product_key = f"{brand}_{article}"
                prodnum_key = f"PRODNUM_{producer_number}"  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ Prodnum
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
                if product_key in blocked_products:
                    print(f"üö´ –¢–æ–≤–∞—Ä {brand} {article} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped_blocked += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–æ–≤–∞—Ä –ø–æ Prodnum
                if prodnum_key in blocked_products:
                    print(f"üö´ –¢–æ–≤–∞—Ä —Å Prodnum {producer_number} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped_blocked += 1
                    continue
                
                price = float(row.get('PriceOut', 0)) if pd.notna(row.get('PriceOut')) else 0
                stock_quantity = parse_quantity(row.get('QTY', 0))
                multiplicity = int(row.get('BatchQty', 1)) if pd.notna(row.get('BatchQty')) else 1
                unit = '—à—Ç'
                warehouse = '–ú–∏–∫–∞–¥–æ'
                producer_number = str(row.get('Prodnum', '')).strip()  # Prodnum –¥–ª—è producer_number
                code = str(row.get('Code', '')).strip()
                
                if brand and article and name:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
                    existing_product = MikadosProduct.objects.filter(
                        brand=brand,
                        article=article
                    ).first()
                    
                    if existing_product:
                        print(f"‚ö†Ô∏è  –¢–æ–≤–∞—Ä {brand} {article} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –±–ª–æ–∫–∏—Ä—É–µ–º")
                        blocked_products.add(product_key)
                        blocked_products.add(prodnum_key)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏ –ø–æ Prodnum
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    product = MikadosProduct.objects.create(
                        brand=brand,
                        article=article,
                        name=name,
                        price=price,
                        stock_quantity=stock_quantity,
                        multiplicity=multiplicity,
                        unit=unit,
                        warehouse=warehouse,
                        producer_number=producer_number,
                        code=code
                    )
                    
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ Prodnum
                    blocked_products.add(product_key)
                    blocked_products.add(prodnum_key)
                    
                    created_count += 1
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {brand} {article} - {name[:50]}... (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stock_quantity})")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 2}: {str(e)}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        save_blocked_products(blocked_products)
        
        print(f"\nüéâ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {created_count} —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ {brand_name}")
        print(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {skipped_blocked}")
        print(f"üíæ –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(blocked_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

if __name__ == '__main__':
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if len(sys.argv) > 1:
        brand_name = sys.argv[1]
        count = int(sys.argv[2]) if len(sys.argv) > 2 else 5
        load_mikado_products(brand_name, count)
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python load_mikado_products.py <brand_name> [count]")
        print("–ü—Ä–∏–º–µ—Ä: python load_mikado_products.py BASBUG 5") 