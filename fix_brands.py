#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, Brand, ProductCategory
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–†–ï–ù–î–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç SKF/Skf
    try:
        skf_uppercase = Brand.objects.get(name='SKF')
        skf_lowercase = Brand.objects.get(name='Skf')
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã —Å "Skf" –Ω–∞ "SKF"
        products_to_fix = Product.objects.filter(brand=skf_lowercase)
        for product in products_to_fix:
            product.brand = skf_uppercase
            product.save()
            print(f"‚úÖ –¢–æ–≤–∞—Ä {product.article}: Skf ‚Üí SKF")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±—Ä–µ–Ω–¥
        skf_lowercase.delete()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±—Ä–µ–Ω–¥ 'Skf'")
        
    except Brand.DoesNotExist:
        print("‚ÑπÔ∏è  –î—É–±–ª–∏–∫–∞—Ç SKF/Skf –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º "Mann Filter" –Ω–∞ "Mann"
    try:
        mann_filter = Brand.objects.get(name='Mann Filter')
        mann, created = Brand.objects.get_or_create(name='Mann')
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã —Å "Mann Filter" –Ω–∞ "Mann"
        products_to_fix = Product.objects.filter(brand=mann_filter)
        for product in products_to_fix:
            product.brand = mann
            product.save()
            print(f"‚úÖ –¢–æ–≤–∞—Ä {product.article}: Mann Filter ‚Üí Mann")
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥
        mann_filter.delete()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥ 'Mann Filter'")
        
    except Brand.DoesNotExist:
        print("‚ÑπÔ∏è  –ë—Ä–µ–Ω–¥ 'Mann Filter' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 3. –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –±—Ä–µ–Ω–¥—ã (—É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤)
    empty_brands = []
    for brand in Brand.objects.all():
        if Product.objects.filter(brand=brand).count() == 0:
            empty_brands.append(brand.name)
            brand.delete()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π –±—Ä–µ–Ω–¥: {brand.name}")
    
    if not empty_brands:
        print("‚ÑπÔ∏è  –ü—É—Å—Ç—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –±—Ä–µ–Ω–¥–æ–≤
    products_without_brand = Product.objects.filter(brand__isnull=True)
    if products_without_brand.exists():
        print(f"\n‚ö†Ô∏è  –¢–æ–≤–∞—Ä—ã –±–µ–∑ –±—Ä–µ–Ω–¥–∞: {products_without_brand.count()}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –±—Ä–µ–Ω–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –±—Ä–µ–Ω–¥–∞
        unknown_brand, created = Brand.objects.get_or_create(name='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥')
        for product in products_without_brand:
            product.brand = unknown_brand
            product.save()
            print(f"‚úÖ –¢–æ–≤–∞—Ä {product.article}: –¥–æ–±–∞–≤–ª–µ–Ω –±—Ä–µ–Ω–¥ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥'")
    
    print(f"\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–†–ï–ù–î–û–í:")
    brands = Brand.objects.all().order_by('name')
    for brand in brands:
        count = Product.objects.filter(brand=brand).count()
        if count > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            print(f"   {brand.name}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
    
    print(f"\n–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {brands.filter(product__isnull=False).distinct().count()}")
    print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {Product.objects.count()}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
