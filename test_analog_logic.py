#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json

def test_analog_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ –±–∞–∑–µ –ê–≤—Ç–æ–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞"""

    print("=== –¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ ===\n")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ OC47 Knecht/Mahle
    test_cases = [
        {"article": "OC47", "brand": "Knecht/Mahle"},
        {"article": "C15300", "brand": "MANN-FILTER"},
    ]

    for test_case in test_cases:
        print(f"\n--- –¢–µ—Å—Ç: {test_case['article']} {test_case['brand']} ---")

        try:
            # –ó–∞–ø—Ä–æ—Å –∫ API
            url = "http://localhost:8001/unified_search"
            params = test_case

            response = requests.get(url, params=params, timeout=30)

            if response.status_code == 200:
                data = response.json()
                debug_info = data.get('debug', {})
                
                print(f"‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   - –ê–≤—Ç–æ–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π): {debug_info.get('autokontinent_count', 0)}")
                print(f"   - –ê–≤—Ç–æ–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç (–∞–Ω–∞–ª–æ–≥–∏): {debug_info.get('autokontinent_analog_count', 0)}")
                print(f"   - –ê–≤—Ç–æ–°–ø—É—Ç–Ω–∏–∫: {debug_info.get('autosputnik_count', 0)}")
                print(f"   - –í—Å–µ–≥–æ: {debug_info.get('total_count', 0)}")
                
                analog_articles = debug_info.get('analog_articles_found', [])
                if analog_articles:
                    print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ê–≤—Ç–æ–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–µ:")
                    for analog in analog_articles:
                        print(f"   - {analog[0]} {analog[1]}")
                else:
                    print(f"‚ùå –ê–Ω–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                items = data.get('data', [])
                sources = {}
                for item in items:
                    source = item.get('source', 'unknown')
                    if source not in sources:
                        sources[source] = []
                    sources[source].append(f"{item.get('article')} {item.get('brand')}")

                print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
                for source, items_list in sources.items():
                    print(f"   {source}: {len(items_list)} —Ç–æ–≤–∞—Ä–æ–≤")
                    for item in items_list[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"     - {item}")
                    if len(items_list) > 3:
                        print(f"     ... –∏ –µ—â–µ {len(items_list) - 3}")

            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    test_analog_logic() 