#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, Brand, ProductCategory
    
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # 1. –ü–†–û–ë–õ–ï–ú–´ –° –ê–†–¢–ò–ö–£–õ–ê–ú–ò
    print("\nüìã 1. –ê–ù–ê–õ–ò–ó –ê–†–¢–ò–ö–£–õ–û–í:")
    print("-" * 30)
    
    all_products = Product.objects.all()
    print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {all_products.count()}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    invalid_articles = []
    for product in all_products[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        article = product.article
        print(f"  {article:15} | {product.brand.name if product.brand else '–ù–ï–¢ –ë–†–ï–ù–î–ê':15} | {product.name[:50]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
        if len(article) < 3 or len(article) > 20:
            invalid_articles.append(f"{article} (–¥–ª–∏–Ω–∞: {len(article)})")
    
    if invalid_articles:
        print(f"\n‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã: {len(invalid_articles)}")
        for art in invalid_articles[:10]:
            print(f"    - {art}")
    
    # 2. –ü–†–û–ë–õ–ï–ú–´ –° –ë–†–ï–ù–î–ê–ú–ò
    print("\nüè∑Ô∏è  2. –ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–û–í:")
    print("-" * 30)
    
    brands = Brand.objects.all()
    print(f"–í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤: {brands.count()}")
    
    brand_product_count = {}
    for brand in brands:
        count = Product.objects.filter(brand=brand).count()
        brand_product_count[brand.name] = count
        print(f"  {brand.name:20} | —Ç–æ–≤–∞—Ä–æ–≤: {count:3d}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –±—Ä–µ–Ω–¥–∞
    no_brand_products = Product.objects.filter(brand__isnull=True)
    if no_brand_products.exists():
        print(f"\n‚ö†Ô∏è  –¢–æ–≤–∞—Ä—ã –±–µ–∑ –±—Ä–µ–Ω–¥–∞: {no_brand_products.count()}")
        for product in no_brand_products[:5]:
            print(f"    - {product.article}: {product.name}")
    
    # 3. –ü–†–û–ë–õ–ï–ú–´ –°–í–Ø–ó–ï–ô –ê–†–¢–ò–ö–£–õ-–ë–†–ï–ù–î
    print("\nüîó 3. –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô –ê–†–¢–ò–ö–£–õ-–ë–†–ï–ù–î:")
    print("-" * 40)
    
    mismatched_products = []
    for product in all_products:
        article = product.article
        brand_name = product.brand.name if product.brand else "–ù–ï–¢"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∞—Ä—Ç–∏–∫—É–ª FL1099 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç –±—Ä–µ–Ω–¥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if article.startswith('FL') and brand_name not in ['Mann', 'Mahle', 'Bosch', 'Hella']:
            mismatched_products.append(f"{article} -> {brand_name} (–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä)")
        elif article.startswith('AF') and brand_name not in ['Mann', 'Mahle', 'Bosch', 'Hella']:
            mismatched_products.append(f"{article} -> {brand_name} (–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä)")
        elif article.startswith('BK') and brand_name not in ['Brembo', 'ATE', 'TRW', 'Bosch']:
            mismatched_products.append(f"{article} -> {brand_name} (—Ç–æ—Ä–º–æ–∑–Ω–æ–π –¥–∏—Å–∫)")
        elif article.startswith('CL') and brand_name not in ['Sachs', 'Valeo', 'LuK']:
            mismatched_products.append(f"{article} -> {brand_name} (—Å—Ü–µ–ø–ª–µ–Ω–∏–µ)")
    
    if mismatched_products:
        print(f"‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –∞—Ä—Ç–∏–∫—É–ª-–±—Ä–µ–Ω–¥: {len(mismatched_products)}")
        for mismatch in mismatched_products[:10]:
            print(f"    - {mismatch}")
    
    # 4. –ê–ù–ê–õ–ò–ó –ù–ê–ó–í–ê–ù–ò–ô –¢–û–í–ê–†–û–í
    print("\nüìù 4. –ê–ù–ê–õ–ò–ó –ù–ê–ó–í–ê–ù–ò–ô –¢–û–í–ê–†–û–í:")
    print("-" * 35)
    
    strange_names = []
    for product in all_products:
        name = product.name
        article = product.article
        brand = product.brand.name if product.brand else "–ù–ï–¢"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if article in name and brand in name:
            # –ù–æ—Ä–º–∞–ª—å–Ω–æ - –∞—Ä—Ç–∏–∫—É–ª –∏ –±—Ä–µ–Ω–¥ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            continue
        elif len(name) < 10:
            strange_names.append(f"{article} -> '{name}' (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ)")
        elif name.count(' ') < 2:
            strange_names.append(f"{article} -> '{name}' (–º–∞–ª–æ —Å–ª–æ–≤)")
    
    if strange_names:
        print(f"‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {len(strange_names)}")
        for name in strange_names[:10]:
            print(f"    - {name}")
    
    # 5. –î–£–ë–õ–ò–ö–ê–¢–´
    print("\nüîÑ 5. –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í:")
    print("-" * 25)
    
    # –î—É–±–ª–∏–∫–∞—Ç—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    from django.db.models import Count
    duplicate_articles = Product.objects.values('article').annotate(count=Count('article')).filter(count__gt=1)
    if duplicate_articles:
        print(f"‚ö†Ô∏è  –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞—Ä—Ç–∏–∫—É–ª—ã: {len(duplicate_articles)}")
        for dup in duplicate_articles:
            print(f"    - {dup['article']} ({dup['count']} —Ä–∞–∑)")
    
    # –î—É–±–ª–∏–∫–∞—Ç—ã –±—Ä–µ–Ω–¥–æ–≤ (–ø–æ –∏–º–µ–Ω–∏)
    duplicate_brands = Brand.objects.values('name').annotate(count=Count('name')).filter(count__gt=1)
    if duplicate_brands:
        print(f"‚ö†Ô∏è  –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –±—Ä–µ–Ω–¥—ã: {len(duplicate_brands)}")
        for dup in duplicate_brands:
            print(f"    - {dup['name']} ({dup['count']} —Ä–∞–∑)")
    
    # 6. –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
    print("-" * 35)
    
    if invalid_articles:
        print("  1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã")
    if no_brand_products.exists():
        print("  2. –ù–∞–∑–Ω–∞—á–∏—Ç—å –±—Ä–µ–Ω–¥—ã —Ç–æ–≤–∞—Ä–∞–º –±–µ–∑ –±—Ä–µ–Ω–¥–æ–≤")
    if mismatched_products:
        print("  3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ä—Ç–∏–∫—É–ª-–±—Ä–µ–Ω–¥")
    if duplicate_articles:
        print("  4. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞—Ä—Ç–∏–∫—É–ª—ã")
    if duplicate_brands:
        print("  5. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –±—Ä–µ–Ω–¥—ã")
    
    print("\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
