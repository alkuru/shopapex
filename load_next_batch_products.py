#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (10 —à—Ç—É–∫) –∏–∑ ABCP API
"""
import os
import sys
import django
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex.settings')
django.setup()

from catalog.models import Supplier, Product, Category, Brand
import requests
import json
import time
from decimal import Decimal

def load_next_batch_products():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é —Ç–æ–≤–∞—Ä–æ–≤ (10 —à—Ç—É–∫)"""
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ VintTop
    try:
        supplier = Supplier.objects.get(name="VintTop")
        print(f"‚úì –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.name}")
    except Supplier.DoesNotExist:
        print("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ VintTop –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    existing_count = Product.objects.filter(supplier=supplier).count()
    print(f"üìä –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {existing_count}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    search_queries = [
        "–º–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ",      # –ú–æ—Ç–æ—Ä–Ω—ã–µ –º–∞—Å–ª–∞
        "—Ñ–∏–ª—å—Ç—Ä —Ç–æ–ø–ª–∏–≤–Ω—ã–π",    # –¢–æ–ø–ª–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        "—Å–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è",     # –°–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è
        "—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏",   # –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏
        "–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä",         # –ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã
        "—Ä–∞–¥–∏–∞—Ç–æ—Ä",           # –†–∞–¥–∏–∞—Ç–æ—Ä—ã
        "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",          # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
        "—Å—Ç–∞—Ä—Ç–µ—Ä",            # –°—Ç–∞—Ä—Ç–µ—Ä—ã
        "—Ä–µ–º–µ–Ω—å –ì–†–ú",         # –†–µ–º–Ω–∏ –ì–†–ú
        "–ø–æ–¥—à–∏–ø–Ω–∏–∫",          # –ü–æ–¥—à–∏–ø–Ω–∏–∫–∏
    ]
    
    loaded_products = []
    
    for i, query in enumerate(search_queries, 1):
        print(f"\nüîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' ({i}/10)...")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            search_results = supplier.search_products(query, limit=5)
            
            if not search_results:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
                continue
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            product_data = search_results[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
            existing_product = Product.objects.filter(
                supplier=supplier,
                supplier_product_id=product_data.get('id')
            ).first()
            
            if existing_product:
                print(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä {product_data.get('brand')} {product_data.get('number')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            
            # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_name = "–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏"
            if "–º–∞—Å–ª–æ" in query.lower():
                category_name = "–ú–∞—Å–ª–∞ –∏ –∂–∏–¥–∫–æ—Å—Ç–∏"
            elif "—Ñ–∏–ª—å—Ç—Ä" in query.lower():
                category_name = "–§–∏–ª—å—Ç—Ä—ã"
            elif "—Å–≤–µ—á–∞" in query.lower():
                category_name = "–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è"
            elif "—Ç–æ—Ä–º–æ–∑" in query.lower():
                category_name = "–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
            elif any(word in query.lower() for word in ["–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä", "–ø–æ–¥–≤–µ—Å–∫–∞"]):
                category_name = "–ü–æ–¥–≤–µ—Å–∫–∞"
            elif any(word in query.lower() for word in ["—Ä–∞–¥–∏–∞—Ç–æ—Ä", "–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ"]):
                category_name = "–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è"
            elif any(word in query.lower() for word in ["–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "—Å—Ç–∞—Ä—Ç–µ—Ä", "—ç–ª–µ–∫—Ç—Ä–∏–∫–∞"]):
                category_name = "–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
            elif "—Ä–µ–º–µ–Ω—å" in query.lower():
                category_name = "–†–µ–º–Ω–∏ –∏ —Ü–µ–ø–∏"
            elif "–ø–æ–¥—à–∏–ø–Ω–∏–∫" in query.lower():
                category_name = "–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏"
            
            category, created = Category.objects.get_or_create(
                name=category_name,
                defaults={'description': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name}'}
            )
            if created:
                print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")
            
            # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥
            brand_name = product_data.get('brand', 'Unknown').strip()
            if brand_name and brand_name != 'Unknown':
                brand, created = Brand.objects.get_or_create(
                    name=brand_name,
                    defaults={'description': f'–ë—Ä–µ–Ω–¥ {brand_name}'}
                )
                if created:
                    print(f"‚úì –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥: {brand_name}")
            else:
                brand = None
            
            # –£–ª—É—á—à–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            original_name = product_data.get('name', '').strip()
            number = product_data.get('number', '').strip()
            
            improved_name = improve_product_name(original_name, brand_name, number, query)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            product = Product.objects.create(
                name=improved_name,
                description=f"–ê—Ä—Ç–∏–∫—É–ª: {number}\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {original_name}",
                price=Decimal(str(product_data.get('price', 0))),
                category=category,
                brand=brand,
                supplier=supplier,
                supplier_product_id=product_data.get('id'),
                article_number=number,
                stock_quantity=product_data.get('quantity', 0),
                is_active=True
            )
            
            loaded_products.append({
                'name': improved_name,
                'brand': brand_name,
                'number': number,
                'price': product.price,
                'category': category_name
            })
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {improved_name} (ID: {product.id})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {str(e)}")
            continue
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –ò–¢–û–ì–ò –ó–ê–ì–†–£–ó–ö–ò:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(loaded_products)}")
    print(f"üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {Product.objects.filter(supplier=supplier).count()}")
    
    if loaded_products:
        print(f"\nüìã –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –¢–û–í–ê–†–´:")
        for i, product in enumerate(loaded_products, 1):
            print(f"{i:2d}. {product['brand']} {product['number']} - {product['name']}")
            print(f"     üí∞ {product['price']} —Ä—É–±. | üìÇ {product['category']}")
    
    print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def improve_product_name(original_name, brand, number, search_query):
    """–£–ª—É—á—à–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è"""
    
    if not original_name:
        return f"{brand} {number}" if brand else number
    
    # –£–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
    name = original_name
    if number and name.startswith(number):
        name = name[len(number):].strip()
        if name.startswith('-') or name.startswith(','):
            name = name[1:].strip()
    
    # –£–±–∏—Ä–∞–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
    if brand and name.lower().startswith(brand.lower()):
        name = name[len(brand):].strip()
        if name.startswith('-') or name.startswith(','):
            name = name[1:].strip()
    
    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
    if not name.strip():
        name = original_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥ –≤ –Ω–∞—á–∞–ª–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if brand and not name.lower().startswith(brand.lower()):
        name = f"{brand} {name}"
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
    if "–º–∞—Å–ª–æ" in search_query.lower():
        if "–º–æ—Ç–æ—Ä–Ω–æ–µ" not in name.lower() and "–º–∞—Å–ª–æ" in name.lower():
            name = name.replace("–º–∞—Å–ª–æ", "–º–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ", 1)
    elif "—Ñ–∏–ª—å—Ç—Ä" in search_query.lower():
        if "—Ñ–∏–ª—å—Ç—Ä" in name.lower() and "—Ç–æ–ø–ª–∏–≤–Ω—ã–π" not in name.lower():
            if "—Ç–æ–ø–ª–∏–≤" in search_query.lower():
                name = name.replace("—Ñ–∏–ª—å—Ç—Ä", "—Ñ–∏–ª—å—Ç—Ä —Ç–æ–ø–ª–∏–≤–Ω—ã–π", 1)
    elif "—Å–≤–µ—á–∞" in search_query.lower():
        if "—Å–≤–µ—á–∞" in name.lower() and "–∑–∞–∂–∏–≥–∞–Ω–∏—è" not in name.lower():
            name = name.replace("—Å–≤–µ—á–∞", "—Å–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è", 1)
    elif "–∫–æ–ª–æ–¥–∫–∏" in search_query.lower():
        if "–∫–æ–ª–æ–¥–∫–∏" in name.lower() and "—Ç–æ—Ä–º–æ–∑–Ω—ã–µ" not in name.lower():
            name = name.replace("–∫–æ–ª–æ–¥–∫–∏", "—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏", 1)
    
    return name.strip()

if __name__ == "__main__":
    load_next_batch_products()
