#!/usr/bin/env python
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–∫–∏ 'str' object has no attribute 'get'
"""
import os
import sys
import django
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def debug_get_product_analogs_step_by_step():
    """–ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–µ—Ç–æ–¥–∞ get_product_analogs"""
    
    print("üîç –ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞ get_product_analogs...")
    print("=" * 60)
    
    try:
        supplier = Supplier.objects.filter(is_active=True, api_type='autoparts').first()
        
        if not supplier:
            print("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            return
        
        print(f"üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.name}")
        article = 'test123'
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥—ã
        print(f"\nüîç –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è '{article}'...")
        success, brands_data = supplier.get_abcp_brands(article)
        print(f"   –£—Å–ø–µ—Ö: {success}")
        print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(brands_data)}")
        
        if not success:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {brands_data}")
            return
        
        print(f"   –î–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {str(brands_data)[:200]}...")
        
        # –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        print(f"\nüîç –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        filtered_brands = []
        
        if isinstance(brands_data, dict):
            print(f"   –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
            for i, (key, brand_info) in enumerate(brands_data.items()):
                print(f"   {i+1}. –ö–ª—é—á: {key}")
                print(f"      –ó–Ω–∞—á–µ–Ω–∏–µ: {brand_info}")
                print(f"      –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è: {type(brand_info)}")
                
                if isinstance(brand_info, dict):
                    filtered_brands.append(brand_info)
                    print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ filtered_brands")
                else:
                    print(f"      ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ —Å–ª–æ–≤–∞—Ä—å)")
                
                if i >= 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    break
        
        print(f"   –ò—Ç–æ–≥–æ –≤ filtered_brands: {len(filtered_brands)}")
        
        # –®–∞–≥ 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±—Ä–µ–Ω–¥
        print(f"\nüîç –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞...")
        
        for i, brand_info in enumerate(filtered_brands):
            print(f"\n   --- –ë—Ä–µ–Ω–¥ {i+1} ---")
            print(f"   brand_info: {brand_info}")
            print(f"   –¢–∏–ø brand_info: {type(brand_info)}")
            
            if not isinstance(brand_info, dict):
                print(f"   ‚ùå brand_info –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º!")
                continue
            
            try:
                brand_name = brand_info.get('brand', '')
                article_code = brand_info.get('number', article)
                
                print(f"   brand_name: '{brand_name}'")
                print(f"   article_code: '{article_code}'")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º _search_articles_by_brand
                print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º _search_articles_by_brand...")
                success, articles_data = supplier._search_articles_by_brand(article_code, brand_name)
                
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: success={success}")
                print(f"   articles_data —Ç–∏–ø: {type(articles_data)}")
                print(f"   articles_data: {str(articles_data)[:100]}...")
                
                if success and articles_data and isinstance(articles_data, (list, dict)):
                    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                    
                    products_list = articles_data if isinstance(articles_data, list) else [articles_data]
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products_list)}")
                    
                    for j, product in enumerate(products_list):
                        print(f"   –¢–æ–≤–∞—Ä {j+1}: —Ç–∏–ø={type(product)}, –¥–∞–Ω–Ω—ã–µ={str(product)[:50]}...")
                        
                        if not isinstance(product, dict):
                            print(f"   ‚ùå –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê: product –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º!")
                            print(f"   product = {product}")
                            print(f"   type(product) = {type(product)}")
                            break
                        
                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º .get() –≤—ã–∑–æ–≤—ã
                        try:
                            article_val = product.get('articleCode', article_code)
                            print(f"   ‚úÖ product.get('articleCode') —Ä–∞–±–æ—Ç–∞–µ—Ç: {article_val}")
                        except Exception as e:
                            print(f"   ‚ùå –û–®–ò–ë–ö–ê –≤ product.get(): {e}")
                            break
                else:
                    print(f"   ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã–µ")
                    
            except Exception as e:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–µ–Ω–¥–∞: {e}")
                traceback.print_exc()
                break
                
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    debug_get_product_analogs_step_by_step()
