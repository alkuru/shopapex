#!/usr/bin/env python
"""
–≠–º—É–ª—è—Ç–æ—Ä API vinttop.ru –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏—Ö —Ä–µ–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier, SupplierSyncLog

def create_mock_api_response():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    try:
        supplier = Supplier.objects.get(name__icontains='vinttop')
    except Supplier.DoesNotExist:
        print("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ VintTop –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print("üé≠ –°–û–ó–î–ê–ù–ò–ï MOCK API –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print("–ü–æ–∫–∞ API —Å–µ—Ä–≤–µ—Ä vinttop.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503),")
    print("—Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ API
    class MockVintTopAPI:
        def __init__(self, supplier):
            self.supplier = supplier
            
        def test_connection(self):
            """–≠–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
            return True, "Mock API: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
            
        def search_products(self, article):
            """–≠–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
            return True, {
                "brands": [
                    {
                        "brand": "BOSCH",
                        "parts": [
                            {
                                "name": f"–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ {article}",
                                "code": article,
                                "price": "2500.00",
                                "currency": "RUB",
                                "quantity": 5,
                                "description": "–ü–µ—Ä–µ–¥–Ω–∏–µ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏"
                            }
                        ]
                    },
                    {
                        "brand": "FEBI",
                        "parts": [
                            {
                                "name": f"–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä {article}",
                                "code": article + "-ALT",
                                "price": "850.00", 
                                "currency": "RUB",
                                "quantity": 12,
                                "description": "–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è"
                            }
                        ]
                    }
                ]
            }
            
        def get_staff(self):
            """–≠–º—É–ª—è—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
            return True, [
                {
                    "id": 1,
                    "name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                    "position": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
                    "email": "ivan@vinttop.ru",
                    "phone": "+7 (495) 123-45-67",
                    "is_active": True
                },
                {
                    "id": 2,
                    "name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", 
                    "position": "–ö–ª–∞–¥–æ–≤—â–∏–∫",
                    "email": "maria@vinttop.ru",
                    "phone": "+7 (495) 123-45-68",
                    "is_active": True
                }
            ]
            
        def get_delivery_methods(self):
            """–≠–º—É–ª—è—Ü–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏"""
            return True, [
                {
                    "id": 1,
                    "name": "–°–∞–º–æ–≤—ã–≤–æ–∑",
                    "description": "–°–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞",
                    "cost": 0,
                    "delivery_time": "–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"
                },
                {
                    "id": 2,
                    "name": "–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
                    "description": "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ –ú–æ—Å–∫–≤–µ",
                    "cost": 500,
                    "delivery_time": "1-2 –¥–Ω—è"
                }
            ]
            
        def get_order_statuses(self):
            """–≠–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
            return True, [
                {"id": 1, "name": "–ù–æ–≤—ã–π", "description": "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω"},
                {"id": 2, "name": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", "description": "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"},
                {"id": 3, "name": "–í —Ä–∞–±–æ—Ç–µ", "description": "–ó–∞–∫–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è"},
                {"id": 4, "name": "–ì–æ—Ç–æ–≤", "description": "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"},
                {"id": 5, "name": "–í—ã–¥–∞–Ω", "description": "–ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç—É"}
            ]
            
        def get_client_groups(self):
            """–≠–º—É–ª—è—Ü–∏—è –≥—Ä—É–ø–ø –∫–ª–∏–µ–Ω—Ç–æ–≤"""
            return True, [
                {"id": 1, "name": "–†–æ–∑–Ω–∏—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", "discount": 0},
                {"id": 2, "name": "–û–ø—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", "discount": 5},
                {"id": 3, "name": "VIP –∫–ª–∏–µ–Ω—Ç—ã", "discount": 10}
            ]
            
        def get_clients(self):
            """–≠–º—É–ª—è—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
            return True, [
                {
                    "id": 1,
                    "name": "–û–û–û –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å",
                    "email": "info@autoservice.ru",
                    "phone": "+7 (495) 555-01-01",
                    "group_id": 2,
                    "balance": 15000.50,
                    "is_active": True
                },
                {
                    "id": 2,
                    "name": "–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                    "email": "petrov@example.com",
                    "phone": "+7 (926) 555-02-02", 
                    "group_id": 1,
                    "balance": 2500.00,
                    "is_active": True
                }
            ]
            
        def get_orders(self):
            """–≠–º—É–ª—è—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
            return True, [
                {
                    "id": 1001,
                    "client_id": 1,
                    "status_id": 2,
                    "total_amount": 5500.00,
                    "created_at": "2024-12-01 10:30:00",
                    "items": [
                        {
                            "product_code": "0986424815",
                            "product_name": "–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ BOSCH",
                            "quantity": 2,
                            "price": 2500.00,
                            "total": 5000.00
                        },
                        {
                            "product_code": "123456789-ALT",
                            "product_name": "–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä FEBI", 
                            "quantity": 1,
                            "price": 500.00,
                            "total": 500.00
                        }
                    ]
                }
            ]
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ mock –≤–µ—Ä—Å–∏–∏
    mock_api = MockVintTopAPI(supplier)
    
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MOCK API:")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print(f"\n1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    success, message = mock_api.test_connection()
    print(f"   ‚úÖ {message}")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    print(f"\n2. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É '0986424815':")
    success, result = mock_api.search_products("0986424815")
    if success:
        brands = result.get('brands', [])
        total_products = sum(len(brand.get('parts', [])) for brand in brands)
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        for brand in brands:
            brand_name = brand.get('brand')
            parts_count = len(brand.get('parts', []))
            print(f"      - {brand_name}: {parts_count} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –¢–µ—Å—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π
    entities = [
        ("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", mock_api.get_staff),
        ("–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏", mock_api.get_delivery_methods), 
        ("–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤", mock_api.get_order_statuses),
        ("–ì—Ä—É–ø–ø—ã –∫–ª–∏–µ–Ω—Ç–æ–≤", mock_api.get_client_groups),
        ("–ö–ª–∏–µ–Ω—Ç—ã", mock_api.get_clients),
        ("–ó–∞–∫–∞–∑—ã", mock_api.get_orders)
    ]
    
    for name, method in entities:
        print(f"\n3. {name}:")
        success, data = method()
        if success and isinstance(data, list):
            print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
            if data:
                first_item = data[0]
                item_name = first_item.get('name', first_item.get('id', 'N/A'))
                print(f"      –ü—Ä–∏–º–µ—Ä: {item_name}")
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    SupplierSyncLog.objects.create(
        supplier=supplier,
        status='info',
        message='Mock API –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω. –†–µ–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä vinttop.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503). –û–∂–∏–¥–∞–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL API.'
    )
    
    print(f"\nüìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print(f"‚úÖ Mock API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print(f"‚ö†Ô∏è  –ù—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π URL API –æ—Ç vinttop.ru")
    print(f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:")
    print(f"   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL API")
    print(f"   - –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞")
    print(f"   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ API")

if __name__ == "__main__":
    create_mock_api_response()
