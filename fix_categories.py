#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, ProductCategory, Brand
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô –¢–û–í–ê–†–û–í")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º/–Ω–∞–∑–≤–∞–Ω–∏—è–º
    category_mapping = {
        # –§–∏–ª—å—Ç—Ä—ã
        'FL': '–§–∏–ª—å—Ç—Ä—ã',      # –ú–∞—Å–ª—è–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        'AF': '–§–∏–ª—å—Ç—Ä—ã',      # –í–æ–∑–¥—É—à–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        'FF': '–§–∏–ª—å—Ç—Ä—ã',      # –¢–æ–ø–ª–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        
        # –¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        'BK': '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',  # –¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏ (Brake disc)
        'BP': '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',  # –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ (Brake pads)
        'BR': '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',  # –¢–æ—Ä–º–æ–∑–Ω—ã–µ
        
        # –î–≤–∏–≥–∞—Ç–µ–ª—å
        'SP': '–î–≤–∏–≥–∞—Ç–µ–ª—å',    # –°–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è (Spark plugs)
        'WP': '–î–≤–∏–≥–∞—Ç–µ–ª—å',    # –í–æ–¥—è–Ω—ã–µ –Ω–∞—Å–æ—Å—ã (Water pump)
        'TB': '–î–≤–∏–≥–∞—Ç–µ–ª—å',    # –†–µ–º–Ω–∏ –ì–†–ú (Timing belt)
        
        # –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è
        'CL': '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è',  # –°—Ü–µ–ø–ª–µ–Ω–∏–µ (Clutch)
        'CV': '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è',  # –®–†–£–° (CV joint)
        
        # –ü–æ–¥–≤–µ—Å–∫–∞
        'SH': '–ü–æ–¥–≤–µ—Å–∫–∞',     # –ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã (Shock absorber)
        'ST': '–ü–æ–¥–≤–µ—Å–∫–∞',     # –°—Ç–æ–π–∫–∏ (Strut)
        'SP': '–ü–æ–¥–≤–µ—Å–∫–∞',     # –ü—Ä—É–∂–∏–Ω—ã (Spring)
        
        # –≠–ª–µ–∫—Ç—Ä–∏–∫–∞
        'AL': '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã (Alternator)
        'ST': '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',    # –°—Ç–∞—Ä—Ç–µ—Ä—ã (Starter)
        'IG': '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',    # –ó–∞–∂–∏–≥–∞–Ω–∏–µ (Ignition)
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = {}
    for cat in ProductCategory.objects.all():
        categories[cat.name] = cat
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    for name in categories.keys():
        print(f"   - {name}")
    
    print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
    
    updated_count = 0
    total_products = Product.objects.count()
    
    for product in Product.objects.all():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        article_prefix = product.article[:2]
        new_category_name = category_mapping.get(article_prefix)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if not new_category_name:
            name_lower = product.name.lower()
            if any(word in name_lower for word in ['—Ñ–∏–ª—å—Ç—Ä', 'filter']):
                new_category_name = '–§–∏–ª—å—Ç—Ä—ã'
            elif any(word in name_lower for word in ['—Ç–æ—Ä–º–æ–∑', 'brake', '–∫–æ–ª–æ–¥–∫–∏', '–¥–∏—Å–∫']):
                new_category_name = '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'
            elif any(word in name_lower for word in ['—Å–≤–µ—á–∞', '—Ä–µ–º–µ–Ω—å', '–Ω–∞—Å–æ—Å', '–≤–æ–¥—è–Ω–æ–π']):
                new_category_name = '–î–≤–∏–≥–∞—Ç–µ–ª—å'
            elif any(word in name_lower for word in ['—Å—Ü–µ–ø–ª–µ–Ω–∏–µ', '—à—Ä—É—Å', 'clutch']):
                new_category_name = '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è'
            elif any(word in name_lower for word in ['–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä', '—Å—Ç–æ–π–∫–∞', '–ø—Ä—É–∂–∏–Ω–∞']):
                new_category_name = '–ü–æ–¥–≤–µ—Å–∫–∞'
            else:
                new_category_name = '–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏'  # –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if new_category_name in categories:
            new_category = categories[new_category_name]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if product.category != new_category:
                old_category = product.category.name if product.category else '–ù–µ—Ç'
                product.category = new_category
                product.save()
                updated_count += 1
                print(f"‚úÖ {product.article}: {old_category} ‚Üí {new_category_name}")
    
    print(f"\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {updated_count} –∏–∑ {total_products}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    for category in ProductCategory.objects.all():
        count = Product.objects.filter(category=category).count()
        print(f"   {category.name}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
