#!/usr/bin/env python
"""
–ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–µ—Ç–æ–¥–∞ get_product_analogs
"""

import os
import django
import traceback
import hashlib
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def step_by_step_debug():
    """–ü–æ—à–∞–≥–æ–≤–æ –æ—Ç–ª–∞–∂–∏–≤–∞–µ–º get_product_analogs"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier = Supplier.objects.filter(api_type='autoparts').first()
        
        if not supplier:
            print("‚ùå ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier.name}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞ get_product_analogs
        article = "1234567890"
        brand = "UNKNOWN_BRAND"
        limit = 20
        
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: {article}, –±—Ä–µ–Ω–¥: {brand}")
        
        # –°–æ–∑–¥–∞–µ–º md5-—Ö—ç—à –ø–∞—Ä–æ–ª—è
        password_hash = hashlib.md5(supplier.api_password.encode('utf-8')).hexdigest()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        brands_url = f"{supplier.api_url.rstrip('/')}/search/brands"
        
        params = {
            'userlogin': supplier.api_login,
            'userpsw': password_hash,
            'number': article.strip(),
            'useOnlineStocks': 1 if supplier.use_online_stocks else 0
        }
        
        print(f"\nüì° –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ brands API...")
        response = requests.get(brands_url, params=params, timeout=15)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return
            
        brands_data = response.json()
        print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥–æ–≤: {type(brands_data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
        if not isinstance(brands_data, (list, dict)):
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ: {type(brands_data)}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ (–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å)
        if isinstance(brands_data, dict) and 'errorCode' in brands_data:
            error_code = brands_data.get('errorCode')
            error_message = brands_data.get('errorMessage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            print(f"‚ùå ABCP API –æ—à–∏–±–∫–∞ {error_code}: {error_message}")
            return
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {brands_data}")
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π
        if isinstance(brands_data, dict):
            print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫...")
            brands_list = []
            for key, value in brands_data.items():
                print(f"  –ö–ª—é—á: {key}, –ó–Ω–∞—á–µ–Ω–∏–µ: {type(value)} = {value}")
                if isinstance(value, dict) and ('brand' in value or 'number' in value):
                    brands_list.append(value)
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫ —Å–ø–∏—Å–∫—É")
                else:
                    print(f"    ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω")
            brands_data = brands_list
            print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å —Å–ø–∏—Å–æ–∫
        if not isinstance(brands_data, list):
            print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω {type(brands_data)}")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ dict
        original_count = len(brands_data)
        brands_data = [item for item in brands_data if isinstance(item, dict)]
        print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ dict –æ–±—ä–µ–∫—Ç—ã: {original_count} -> {len(brands_data)}")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—Ä–µ–Ω–¥, —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        if brand:
            print(f"üîé –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥—É: {brand}")
            filtered_brands = []
            for b in brands_data:
                if isinstance(b, dict):
                    brand_name = b.get('brand', '')
                    print(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º: {brand_name} vs {brand}")
                    if brand_name.lower() == brand.lower():
                        filtered_brands.append(b)
                        print(f"    ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ!")
                    else:
                        print(f"    ‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                else:
                    print(f"  ‚ùå –ù–µ dict: {type(b)}")
            brands_data = filtered_brands
            print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±—Ä–µ–Ω–¥—É: {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if limit and len(brands_data) > limit:
            brands_data = brands_data[:limit]
            print(f"‚úÇÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ {limit} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –¢–µ–ø–µ—Ä—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –±—Ä–µ–Ω–¥–∞–º
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –ø–æ {len(brands_data)} –±—Ä–µ–Ω–¥–∞–º...")
        analogs = []
        
        for i, brand_info in enumerate(brands_data):
            print(f"\n--- –ë—Ä–µ–Ω–¥ {i+1} ---")
            print(f"–¢–∏–ø: {type(brand_info)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–≤–∞—Ä—å
            if not isinstance(brand_info, dict):
                print(f"‚ùå –ù–µ dict, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
                
            brand_name = brand_info.get('brand', '')
            article_code = brand_info.get('number', article)
            print(f"–ë—Ä–µ–Ω–¥: {brand_name}")
            print(f"–ê—Ä—Ç–∏–∫—É–ª: {article_code}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
            print(f"üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ articles API...")
            
            try:
                success, articles_data = supplier._search_articles_by_brand(article_code, brand_name)
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: success={success}")
                
                if success:
                    print(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: {type(articles_data)}")
                    print(f"–î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–µ–π: {str(articles_data)[:200]}...")
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ articles_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
                    if isinstance(articles_data, dict):
                        if 'articles' in articles_data:
                            products_list = articles_data['articles']
                            print(f"–ù–∞–π–¥–µ–Ω –∫–ª—é—á 'articles': {type(products_list)}")
                        elif 'data' in articles_data:
                            products_list = articles_data['data']
                            print(f"–ù–∞–π–¥–µ–Ω –∫–ª—é—á 'data': {type(products_list)}")
                        else:
                            products_list = [articles_data]  # –ï–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
                            print(f"–°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞")
                    else:
                        products_list = articles_data
                        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–ø–∏—Å–æ–∫")
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                    if not isinstance(products_list, list):
                        print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω {type(products_list)}")
                        continue
                        
                    print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(products_list)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                    
                    for j, product in enumerate(products_list):
                        print(f"  –ü—Ä–æ–¥—É–∫—Ç {j+1}: {type(product)}")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                        if not isinstance(product, dict):
                            print(f"    ‚ùå –ù–µ dict, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                            
                        analog = {
                            'article': product.get('articleCode', article_code),
                            'article_fix': product.get('articleCodeFix', article_code),
                            'brand': product.get('brand', brand_name),
                            'name': product.get('description', ''),
                            'price': product.get('price', 0),
                            'availability': product.get('availability', 0),
                            'delivery_period': product.get('deliveryPeriod', 0),
                            'weight': product.get('weight', '0'),
                            'article_id': product.get('articleId', ''),
                            'is_original': brand_name.lower() == brand.lower() if brand else False
                        }
                        analogs.append(analog)
                        print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–Ω–∞–ª–æ–≥: {analog['article']} {analog['brand']}")
                        
                        if len(analogs) >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            print(f"  üõë –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                            break
                            
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π: {articles_data}")
                    
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ articles API: {e}")
                traceback.print_exc()
                break
            
            if len(analogs) >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                break
        
        print(f"\n‚úÖ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {len(analogs)}")
        for analog in analogs:
            print(f"  - {analog['article']} {analog['brand']} - {analog['name'][:30]}...")
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    step_by_step_debug()
