#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ K20PBR-S10 –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.supplier_models import Supplier
    from catalog.models import Product, Brand, ProductCategory
    
    print("üîç –ó–ê–ì–†–£–ó–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –¢–û–í–ê–†–ê K20PBR-S10")
    print("=" * 50)
    
    # –ù–∞–π–¥–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ VintTop
    supplier = Supplier.objects.filter(name__icontains='VintTop').first()
    
    if not supplier:
        print("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ VintTop –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    print(f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.name}")
    
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ API
    article = "K20PBR-S10"
    print(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: {article}")
    
    success, result = supplier.search_products_by_article(article)
    
    if success and result:
        print(f"‚úÖ API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ: {type(result)}")
        print(f"üìä –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(str(result))}")
        
        # –ï—Å–ª–∏ result —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        if isinstance(result, list) and result:
            for i, product_data in enumerate(result[:3], 1):
                if isinstance(product_data, dict):
                    print(f"\n{i}. –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:")
                    print(f"   –ê—Ä—Ç–∏–∫—É–ª: {product_data.get('article', 'N/A')}")
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data.get('name', 'N/A')}")
                    print(f"   –¶–µ–Ω–∞: {product_data.get('price', 'N/A')}")
                    print(f"   –ë—Ä–µ–Ω–¥: {product_data.get('brand', 'N/A')}")
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
                    try:
                        # –ù–∞–π–¥–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –±—Ä–µ–Ω–¥
                        brand_name = product_data.get('brand', 'Unknown')
                        brand, _ = Brand.objects.get_or_create(
                            name=brand_name,
                            defaults={'is_active': True}
                        )
                        
                        # –ù–∞–π–¥–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                        category, _ = ProductCategory.objects.get_or_create(
                            name='–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏',
                            defaults={'is_active': True}
                        )
                        
                        # –°–æ–∑–¥–∞–¥–∏–º —Ç–æ–≤–∞—Ä
                        product, created = Product.objects.get_or_create(
                            article=product_data.get('article', article),
                            defaults={
                                'name': product_data.get('name', f'–¢–æ–≤–∞—Ä {article}'),
                                'brand': brand,
                                'category': category,
                                'price': float(product_data.get('price', 0)),
                                'description': f'–ó–∞–≥—Ä—É–∂–µ–Ω —Å {supplier.name}',
                                'stock_quantity': 1,
                                'is_active': True
                            }
                        )
                        
                        if created:
                            print(f"   ‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ: {product.article}")
                        else:
                            print(f"   ‚ÑπÔ∏è  –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {product.article}")
                            
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        else:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")
    else:
        print(f"‚ùå –ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {result}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
