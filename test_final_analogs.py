#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Ç–µ—Å—Ç API –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤
"""

import requests
import json

def test_analogs_api_directly():
    """–¢–µ—Å—Ç API –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã"""
    
    print("=== –¢–µ—Å—Ç API –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ HTTP ===\n")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å)
    base_url = "http://localhost:8000"  # –ë–∞–∑–æ–≤—ã–π URL Django —Å–µ—Ä–≤–µ—Ä–∞
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get(f"{base_url}/", timeout=10)
        print(f"   ‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status_code})")
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
        return
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤
    print("\n2. –¢–µ—Å—Ç API endpoint –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤...")
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_articles = [
        "0986424815",  # BOSCH —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏
        "13.0460-2815.2",  # ATE —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏
        "1234567890",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª
    ]
    
    for article in test_articles:
        print(f"\n   –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ä—Ç–∏–∫—É–ª: {article}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoint'—ã
        endpoints = [
            f"/api/analogs/{article}/",
            f"/api/products/{article}/analogs/",
            f"/catalog/analogs/{article}/",
            f"/search/analogs/?article={article}",
        ]
        
        found_endpoint = False
        for endpoint in endpoints:
            try:
                url = f"{base_url}{endpoint}"
                response = requests.get(url, timeout=10)
                
                if response.status_code == 200:
                    print(f"     ‚úÖ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç: {endpoint}")
                    try:
                        data = response.json()
                        if isinstance(data, dict) and 'analogs' in data:
                            analogs_count = len(data.get('analogs', []))
                            print(f"     ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {analogs_count}")
                        else:
                            print(f"     ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {str(data)[:100]}...")
                        found_endpoint = True
                        break
                    except json.JSONDecodeError:
                        print(f"     ‚ö†Ô∏è  –û—Ç–≤–µ—Ç –Ω–µ JSON: {response.text[:100]}...")
                elif response.status_code == 404:
                    continue  # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π endpoint
                else:
                    print(f"     ‚ö†Ô∏è  HTTP {response.status_code}: {endpoint}")
                    
            except requests.exceptions.RequestException as e:
                continue  # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π endpoint
        
        if not found_endpoint:
            print(f"     ‚ùå API endpoint –¥–ª—è –∞–Ω–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_manual_supplier_method():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Python –∫–æ–¥"""
    
    print("\n=== –¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ get_product_analogs –Ω–∞–ø—Ä—è–º—É—é ===\n")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—à–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    try:
        with open('catalog/supplier_models.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –º–µ—Ç–æ–¥ get_product_analogs
        if 'def get_product_analogs(' in content:
            print("‚úÖ –ú–µ—Ç–æ–¥ get_product_analogs –Ω–∞–π–¥–µ–Ω –≤ supplier_models.py")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            fixes = [
                'isinstance(brands_data, dict)',
                'isinstance(brand_info, dict)', 
                'isinstance(product, dict)',
                'if not isinstance(product, dict):'
            ]
            
            found_fixes = []
            for fix in fixes:
                if fix in content:
                    found_fixes.append(fix)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {fix}")
                else:
                    print(f"‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {fix}")
            
            if len(found_fixes) >= 3:
                print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ({len(found_fixes)}/{len(fixes)})")
                print("üõ°Ô∏è  –ú–µ—Ç–æ–¥ –∑–∞—â–∏—â–µ–Ω –æ—Ç –æ—à–∏–±–∫–∏ 'str' object has no attribute 'get'")
            else:
                print(f"\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ({len(found_fixes)}/{len(fixes)})")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ get_product_analogs –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª supplier_models.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def show_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
    
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    print("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã:")
    print("   - catalog/models.py (–æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–∞)")
    print("   - catalog/supplier_models.py (–º–æ–¥–µ–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤)")
    print()
    print("‚úÖ –û—à–∏–±–∫–∞ 'str' object has no attribute 'get' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞:")
    print("   - –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ isinstance() –¥–ª—è brands_data")
    print("   - –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ isinstance() –¥–ª—è brand_info")  
    print("   - –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ isinstance() –¥–ª—è product")
    print()
    print("üîß –ß–¢–û –û–°–¢–ê–õ–û–°–¨ –°–î–ï–õ–ê–¢–¨:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
    print("   2. –°–æ–∑–¥–∞—Ç—å API endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤")
    print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ABCP API")
    print("   4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ Django")
    print()
    print("üìÅ –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í:")
    print("   ‚îú‚îÄ‚îÄ catalog/models.py           (–æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏)")
    print("   ‚îú‚îÄ‚îÄ catalog/supplier_models.py  (–º–æ–¥–µ–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤)")
    print("   ‚îú‚îÄ‚îÄ catalog/models_backup.py    (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)")
    print("   ‚îú‚îÄ‚îÄ test_analogs_simple.py      (—Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)")
    print("   ‚îî‚îÄ‚îÄ MODELS_SPLIT_REPORT.md      (–æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ)")
    print("="*60)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤...\n")
    
    # –¢–µ—Å—Ç API —á–µ—Ä–µ–∑ HTTP
    test_analogs_api_directly()
    
    # –¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ –Ω–∞–ø—Ä—è–º—É—é
    test_manual_supplier_method()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    show_summary()
