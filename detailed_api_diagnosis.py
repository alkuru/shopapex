#!/usr/bin/env python
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API VintTop.ru (ABCP)
"""
import os
import sys
import hashlib
import requests
import json
from urllib.parse import urljoin

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex.settings')

import django
django.setup()

from catalog.models import Supplier

def test_manual_request():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é"""
    print("üîç –†–£–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–û–°–ê –ö ABCP API")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –±–∞–∑—ã
    login = "autovag@bk.ru"
    password = "0754"
    base_url = "https://id16251.public.api.abcp.ru"
    
    # MD5 –ø–∞—Ä–æ–ª—å
    password_md5 = hashlib.md5(password.encode()).hexdigest()
    print(f"‚úÖ –õ–æ–≥–∏–Ω: {login}")
    print(f"‚úÖ –ü–∞—Ä–æ–ª—å: {password} -> MD5: {password_md5}")
    print(f"‚úÖ –ë–∞–∑–æ–≤—ã–π URL: {base_url}")
    print()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ /search/brands/
    print("üß™ –¢–ï–°–¢ 1: /search/brands/")
    print("-" * 40)
    
    brands_url = urljoin(base_url, "/search/brands/")
    brands_params = {
        'userlogin': login,
        'userpsw': password_md5,
        'format': 'json'
    }
    
    print(f"URL: {brands_url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {brands_params}")
    print()
    
    try:
        response = requests.get(brands_url, params=brands_params, timeout=30)
        print(f"HTTP –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"Headers: {dict(response.headers)}")
        print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"JSON –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
            except json.JSONDecodeError:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        print()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ /cp/user/
    print("üß™ –¢–ï–°–¢ 2: /cp/user/ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)")
    print("-" * 40)
    
    user_url = urljoin(base_url, "/cp/user/")
    user_params = {
        'userlogin': login,
        'userpsw': password_md5,
        'format': 'json'
    }
    
    print(f"URL: {user_url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {user_params}")
    print()
    
    try:
        response = requests.get(user_url, params=user_params, timeout=30)
        print(f"HTTP –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"Headers: {dict(response.headers)}")
        print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"JSON –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
            except json.JSONDecodeError:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        print()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ MD5 (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å)
    print("üß™ –¢–ï–°–¢ 3: /search/brands/ –ë–ï–ó MD5")
    print("-" * 40)
    
    brands_params_plain = {
        'userlogin': login,
        'userpsw': password,  # –ë–µ–∑ MD5
        'format': 'json'
    }
    
    print(f"URL: {brands_url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {brands_params_plain}")
    print()
    
    try:
        response = requests.get(brands_url, params=brands_params_plain, timeout=30)
        print(f"HTTP –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"Headers: {dict(response.headers)}")
        print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"JSON –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
            except json.JSONDecodeError:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        print()
    
    # –¢–µ—Å—Ç 4: –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–æ–≥–∏–Ω—ã
    print("üß™ –¢–ï–°–¢ 4: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ª–æ–≥–∏–Ω—ã")
    print("-" * 40)
    
    alternative_logins = [
        "Autovag@bk.ru",  # –° –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
        "autovag@bk.ru",  # –í–µ—Å—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        "AUTOVAG@BK.RU",  # –í–µ—Å—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    ]
    
    for alt_login in alternative_logins:
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω: {alt_login}")
        alt_params = {
            'userlogin': alt_login,
            'userpsw': password_md5,
            'format': 'json'
        }
        
        try:
            response = requests.get(brands_url, params=alt_params, timeout=10)
            print(f"  HTTP –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code != 200:
                print(f"  –û—Ç–≤–µ—Ç: {response.text[:200]}")
            else:
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        print()

def test_supplier_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã Supplier"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í SUPPLIER")
    print("=" * 60)
    
    try:
        supplier = Supplier.objects.get(name="VintTop.ru")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.name}")
        print()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        is_connected, message = supplier.test_api_connection()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {is_connected}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print()
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        print("üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É 'NGK'...")
        try:
            results = supplier.search_products_by_article("NGK")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        print()
        
    except Supplier.DoesNotExist:
        print("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ VintTop.ru –Ω–µ –Ω–∞–π–¥–µ–Ω!")

if __name__ == "__main__":
    print("üöÄ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API VINTTOP")
    print("=" * 60)
    print()
    
    test_manual_request()
    test_supplier_methods()
    
    print("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
