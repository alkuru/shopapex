#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, Brand, ProductCategory
    
    print("üîç –ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã
    brands = Brand.objects.all()
    print(f"üìä –í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤: {brands.count()}")
    print("\nüè∑Ô∏è  –°–ü–ò–°–û–ö –ë–†–ï–ù–î–û–í:")
    
    for brand in brands:
        product_count = Product.objects.filter(brand=brand).count()
        print(f"   {brand.id:2d}. {brand.name} (—Ç–æ–≤–∞—Ä–æ–≤: {product_count})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
        if product_count > 0:
            products = Product.objects.filter(brand=brand)[:3]
            for product in products:
                print(f"       - {product.article}: {product.name}")
        print()
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´ –ò –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –ë–†–ï–ù–î–´:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –±—Ä–µ–Ω–¥—ã
    brand_names = {}
    duplicates = []
    for brand in brands:
        name_lower = brand.name.lower()
        if name_lower in brand_names:
            duplicates.append((brand, brand_names[name_lower]))
            print(f"‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç: '{brand.name}' (ID: {brand.id}) –∏ '{brand_names[name_lower].name}' (ID: {brand_names[name_lower].id})")
        else:
            brand_names[name_lower] = brand
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
    known_auto_brands = {
        'ate', 'bosch', 'brembo', 'continental', 'denso', 'febi', 'hella', 
        'lemf√∂rder', 'mahle', 'mann', 'ngk', 'sachs', 'skf', 'valeo',
        'gates', 'dayco', 'contitech', 'pierburg', 'zimmermann', 'textar',
        'jurid', 'trw', 'lucas', 'delphi', 'fag', 'ina', 'luk'
    }
    
    print(f"\n‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã:")
    correct_brands = []
    for brand in brands:
        if brand.name.lower() in known_auto_brands:
            correct_brands.append(brand)
            print(f"   ‚úì {brand.name}")
    
    print(f"\n‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã:")
    incorrect_brands = []
    for brand in brands:
        if brand.name.lower() not in known_auto_brands:
            incorrect_brands.append(brand)
            product_count = Product.objects.filter(brand=brand).count()
            print(f"   ‚úó {brand.name} (—Ç–æ–≤–∞—Ä–æ–≤: {product_count})")
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤: {brands.count()}")
    print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(correct_brands)}")
    print(f"   –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(incorrect_brands)}")
    print(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
