#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø—Ä–∞–π—Å–∞ Mikado —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
"""
import os
import sys
import django
import pandas as pd
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import MikadoProduct

def parse_quantity(qty_val) -> int:
    """–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if pd.isna(qty_val):
            return 0
        elif isinstance(qty_val, str):
            qty_str = str(qty_val).strip().lower()
            if '>' in qty_str:
                # –ï—Å–ª–∏ '>4', –±–µ—Ä–µ–º 5
                return 5
            elif qty_str in ['nan', 'none', '']:
                return 0
            else:
                return int(float(qty_str))
        else:
            return int(float(qty_val))
    except:
        return 0

def load_mikado_brand(brand_name, limit=5):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
    
    print(f'üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ {brand_name} (–ª–∏–º–∏—Ç: {limit})...')
    
    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    df = pd.read_excel('/app/import/mikado_price_1.xlsx')
    brand_items = df[df['BrandName'] == brand_name]
    
    if len(brand_items) == 0:
        print(f'‚ùå –¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ {brand_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        return 0
    
    print(f'üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ {brand_name}: {len(brand_items)}')
    
    created_count = 0
    error_count = 0
    
    for index, row in brand_items.head(limit).iterrows():
        try:
            article = str(row['Code']).strip()
            brand = brand_name
            name = str(row['Prodname']).strip()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            try:
                price = float(row['PriceOut']) if pd.notna(row['PriceOut']) else 0
            except:
                price = 0
                
            # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            stock = parse_quantity(row['QTY'])
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏
            try:
                multiplicity = int(float(row['BatchQty'])) if pd.notna(row['BatchQty']) else 1
            except:
                multiplicity = 1
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            MikadoProduct.objects.create(
                brand=brand,
                article=article,
                name=name,
                price=Decimal(str(price)),
                stock_quantity=stock,
                producer_number=article,
                code=article,
                warehouse='–¶–°-–ú–ö',
                multiplicity=multiplicity,
                unit='—à—Ç'
            )
            
            created_count += 1
            print(f'  ‚úÖ {article} | {name[:30]}... | stock: {stock}')
            
        except Exception as e:
            error_count += 1
            if error_count <= 5:
                print(f'  ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index}: {e}')
            continue
    
    print(f'üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ {brand_name}: {created_count}')
    print(f'‚ùå –û—à–∏–±–æ–∫: {error_count}')
    
    return created_count

def load_all_mikado_brands():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –±—Ä–µ–Ω–¥—ã –ø–æ 5 —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∂–¥—ã–π"""
    
    print('üöÄ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤ Mikado...')
    print('=' * 50)
    
    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    df = pd.read_excel('/app/import/mikado_price_1.xlsx')
    all_brands = df['BrandName'].unique()
    
    print(f'üìã –ù–∞–π–¥–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {len(all_brands)}')
    
    total_created = 0
    
    for brand in all_brands:
        if pd.notna(brand) and brand.strip():
            created = load_mikado_brand(brand.strip(), limit=5)
            total_created += created
            print('-' * 30)
    
    print(f'\nüéâ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    print(f'üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_created}')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    total_count = MikadoProduct.objects.count()
    print(f'üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ Mikado –≤ –±–∞–∑–µ: {total_count}')
    
    return total_created

if __name__ == '__main__':
    if len(sys.argv) > 1:
        brand_name = sys.argv[1]
        load_mikado_brand(brand_name)
    else:
        load_all_mikado_brands() 