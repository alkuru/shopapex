#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
sys.path.append('.')

try:
    django.setup()
    from catalog.models import Product, Brand, ProductAnalog
    from catalog.supplier_models import Supplier
    
    print("üîç –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –ê–ù–ê–õ–û–ì–û–í")
    print("=" * 50)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π
    real_brands = ['ATE', 'Bosch', 'Brembo', 'Continental', 'Denso', 'Febi', 'Hella', 'Lemf√∂rder', 'Mahle', 'NGK', 'Sachs', 'Valeo']
    
    # –ù–∞–π–¥–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏
    real_products = Product.objects.filter(brand__name__in=real_brands)
    print(f"üìä –¢–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏: {real_products.count()}")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    test_products = real_products[:10]  # –í–æ–∑—å–º–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
    
    supplier = Supplier.objects.first()
    if not supplier:
        print("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    analogs_found = 0
    
    for product in test_products:
        print(f"\nüîç –ò—â–µ–º –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è: {product.article} ({product.brand.name})")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}")
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏ —á–µ—Ä–µ–∑ API
            analogs_result = supplier.get_product_analogs(product.article)
            print(f"   API —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {analogs_result}")
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞
            if not isinstance(analogs_result, list):
                print(f"   ‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {analogs_result}")
                continue
            
            if analogs_result:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {len(analogs_result)}")
                analogs_found += len(analogs_result)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–∞–ª–æ–≥–æ–≤
                for i, analog in enumerate(analogs_result[:3]):
                    if isinstance(analog, dict):
                        article = analog.get('article', 'N/A')
                        brand = analog.get('brand', 'N/A')
                        name = analog.get('name', 'N/A')
                        print(f"      {i+1}. {article} ({brand}): {name}")
                    else:
                        print(f"      {i+1}. {analog}")
            else:
                print(f"   ‚ùå –ê–Ω–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∞–ª–æ–≥–æ–≤: {e}")
    
    print(f"\nüìä –ò–¢–û–ì:")
    print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(test_products)}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {analogs_found}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–Ω–∞–ª–æ–≥–∏ –≤ –±–∞–∑–µ
    existing_analogs = ProductAnalog.objects.count()
    print(f"   –ê–Ω–∞–ª–æ–≥–æ–≤ –≤ –±–∞–∑–µ: {existing_analogs}")
    
    # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–∞–ª–æ–≥–æ–≤
    if existing_analogs > 0:
        print(f"\nüîó –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ê–ù–ê–õ–û–ì–ò:")
        for analog in ProductAnalog.objects.all()[:5]:
            print(f"   {analog.product.article} ‚Üí {analog.analog_product.article}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
