#!/usr/bin/env python
"""
–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ brands_data –±–µ–∑ –≤—ã–∑–æ–≤–∞ _search_articles_by_brand
"""

import os
import django
import traceback
import hashlib
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'shopapex_project.settings')
django.setup()

from catalog.models import Supplier

def test_brands_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫—É brands_data"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier = Supplier.objects.filter(api_type='autoparts').first()
        
        if not supplier:
            print("‚ùå ABCP –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier.name}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
        article = "1234567890"
        brand = None
        limit = 20
        
        # –°–æ–∑–¥–∞–µ–º md5-—Ö—ç—à –ø–∞—Ä–æ–ª—è
        password_hash = hashlib.md5(supplier.api_password.encode('utf-8')).hexdigest()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        brands_url = f"{supplier.api_url.rstrip('/')}/search/brands"
        
        params = {
            'userlogin': supplier.api_login,
            'userpsw': password_hash,
            'number': article.strip(),
            'useOnlineStocks': 1 if supplier.use_online_stocks else 0
        }
        
        print(f"üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ brands API...")
        response = requests.get(brands_url, params=params, timeout=15)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return
            
        brands_data = response.json()
        print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥–æ–≤: {type(brands_data)}")
        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {brands_data}")
        
        # –¢–µ–ø–µ—Ä—å –∏–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –≤ –º–µ—Ç–æ–¥–µ get_product_analogs
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
            if not isinstance(brands_data, (list, dict)):
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ: {type(brands_data)}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ (–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å)
            if isinstance(brands_data, dict) and 'errorCode' in brands_data:
                error_code = brands_data.get('errorCode')
                error_message = brands_data.get('errorMessage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"‚ùå ABCP API –æ—à–∏–±–∫–∞ {error_code}: {error_message}")
                return
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π
            if isinstance(brands_data, dict):
                print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫...")
                brands_list = []
                for key, value in brands_data.items():
                    print(f"  –ö–ª—é—á: {key}, –ó–Ω–∞—á–µ–Ω–∏–µ: {type(value)}")
                    if isinstance(value, dict) and ('brand' in value or 'number' in value):
                        brands_list.append(value)
                        print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫ —Å–ø–∏—Å–∫—É")
                    else:
                        print(f"    ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω")
                brands_data = brands_list
                print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å —Å–ø–∏—Å–æ–∫
            if not isinstance(brands_data, list):
                print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω {type(brands_data)}")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ dict
            original_count = len(brands_data)
            brands_data = [item for item in brands_data if isinstance(item, dict)]
            print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ dict –æ–±—ä–µ–∫—Ç—ã: {original_count} -> {len(brands_data)}")
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—Ä–µ–Ω–¥, —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            if brand:
                print(f"üîé –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥—É: {brand}")
                brands_data = [b for b in brands_data if isinstance(b, dict) and b.get('brand', '').lower() == brand.lower()]
                print(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±—Ä–µ–Ω–¥—É: {len(brands_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if limit and len(brands_data) > limit:
                brands_data = brands_data[:limit]
                print(f"‚úÇÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ {limit} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å —Ü–∏–∫–ª–æ–º
            print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –ø–æ {len(brands_data)} –±—Ä–µ–Ω–¥–∞–º...")
            
            for i, brand_info in enumerate(brands_data):
                print(f"--- –ë—Ä–µ–Ω–¥ {i+1} ---")
                print(f"–¢–∏–ø: {type(brand_info)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–≤–∞—Ä—å
                if not isinstance(brand_info, dict):
                    print(f"‚ùå –ù–µ dict, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                    
                print(f"–ö–ª—é—á–∏: {list(brand_info.keys())}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                brand_name = brand_info.get('brand', '')
                article_code = brand_info.get('number', article)
                print(f"–ë—Ä–µ–Ω–¥: {brand_name}")
                print(f"–ê—Ä—Ç–∏–∫—É–ª: {article_code}")
                
                # –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ _search_articles_by_brand –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                print(f"üîÑ –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ _search_articles_by_brand...")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                fake_articles_data = [
                    {
                        'articleCode': article_code,
                        'articleCodeFix': article_code,
                        'brand': brand_name,
                        'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
                        'price': 100.0,
                        'availability': 5,
                        'deliveryPeriod': 1,
                        'weight': '0.5',
                        'articleId': 'test123'
                    }
                ]
                
                print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(fake_articles_data)} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ articles_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                products_list = fake_articles_data
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                if not isinstance(products_list, list):
                    print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω {type(products_list)}")
                    continue
                    
                for j, product in enumerate(products_list):
                    print(f"  –ü—Ä–æ–¥—É–∫—Ç {j+1}: {type(product)}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                    if not isinstance(product, dict):
                        print(f"    ‚ùå –ù–µ dict, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                        
                    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–æ–≥–∞
                    print(f"    üîß –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–æ–≥...")
                    
                    # –≠–¢–û –ú–ï–°–¢–û –ì–î–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –û–®–ò–ë–ö–ê
                    try:
                        analog = {
                            'article': product.get('articleCode', article_code),
                            'article_fix': product.get('articleCodeFix', article_code),
                            'brand': product.get('brand', brand_name),
                            'name': product.get('description', ''),
                            'price': product.get('price', 0),
                            'availability': product.get('availability', 0),
                            'delivery_period': product.get('deliveryPeriod', 0),
                            'weight': product.get('weight', '0'),
                            'article_id': product.get('articleId', ''),
                            'is_original': brand_name.lower() == brand.lower() if brand else False
                        }
                        print(f"    ‚úÖ –ê–Ω–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω: {analog['article']} {analog['brand']}")
                        
                    except Exception as e:
                        print(f"    ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–æ–≥–∞: {e}")
                        print(f"    –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {type(product)}")
                        print(f"    –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
                        traceback.print_exc()
                
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø–µ—Ä–≤—ã–º –±—Ä–µ–Ω–¥–æ–º
                break
                
            print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            traceback.print_exc()
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    test_brands_processing()
